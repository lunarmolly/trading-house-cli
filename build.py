#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –î–æ–º"
—á–µ—Ä–µ–∑ PyInstaller

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python build.py          # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –±–∏–ª–¥–∞
    python build.py --onefile # –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ exe —Ñ–∞–π–ª–∞
    python build.py --debug   # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–¥–∞ —Å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import os
import sys
import shutil
import argparse
import subprocess
from pathlib import Path


def check_pyinstaller():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PyInstaller"""
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller –Ω–∞–π–¥–µ–Ω (–≤–µ—Ä—Å–∏—è {PyInstaller.__version__})")
        return True
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install pyinstaller")
        return False


def clean_build_dirs():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–∏–ª–¥–æ–≤"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"üßπ –û—á–∏—â–∞–µ–º {dir_name}/")
            shutil.rmtree(dir_name)
    
    # –£–¥–∞–ª—è–µ–º .spec —Ñ–∞–π–ª—ã
    for spec_file in Path('.').glob('*.spec'):
        print(f"üßπ –£–¥–∞–ª—è–µ–º {spec_file}")
        spec_file.unlink()


def get_pyinstaller_args(onefile=False, debug=False):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è PyInstaller"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è --add-data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    separator = ';' if os.name == 'nt' else ':'
    
    args = [
        'pyinstaller',
        '--name=TradingHouse',
        f'--add-data=data{separator}data',  # –í–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É data —Å –º—É–∑—ã–∫–æ–π
        f'--add-data=ui{separator}ui',      # –í–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É ui (–¥–ª—è GUI)
        '--hidden-import=customtkinter',
        '--hidden-import=tkinter',
        '--hidden-import=pygame',           # –î–æ–±–∞–≤–ª—è–µ–º pygame –¥–ª—è –º—É–∑—ã–∫–∏
        '--clean',
        '--noconfirm'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
    icon_path = 'data/icon.ico'
    if os.path.exists(icon_path):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ICO —Ñ–∞–π–ª–∞ ~1KB
        if os.path.getsize(icon_path) > 1000:
            args.insert(2, f'--icon={icon_path}')
            print("üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏–∫–æ–Ω–∫—É")
        else:
            print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    else:
        print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∏–ª–¥ –±–µ–∑ –∏–∫–æ–Ω–∫–∏")
    
    if onefile:
        args.append('--onefile')
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞")
    else:
        args.append('--onedir')
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º")
    
    if debug:
        args.extend(['--debug=all', '--console'])
        print("üêõ –í–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º")
    else:
        args.append('--windowed')  # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è GUI
        print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏")
    
    # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
    args.append('main.py')
    
    return args


def create_build_info():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∏–ª–¥–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ git (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            version = subprocess.check_output(
                ['git', 'describe', '--tags', '--always'], 
                stderr=subprocess.DEVNULL,
                text=True
            ).strip()
        except:
            version = "unknown"
        
        build_info = f"""# –¢–æ—Ä–≥–æ–≤—ã–π –î–æ–º - Build Info
–í–µ—Ä—Å–∏—è: {version}
–î–∞—Ç–∞ –±–∏–ª–¥–∞: {os.popen('date /t').read().strip() if os.name == 'nt' else os.popen('date').read().strip()}
Python: {sys.version}
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}

## –ó–∞–ø—É—Å–∫
- –î–ª—è GUI –≤–µ—Ä—Å–∏–∏: TradingHouse.exe
- –î–ª—è CLI –≤–µ—Ä—Å–∏–∏: TradingHouse.exe cli

## –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–∞–ø–∫–∞ 'data' —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
"""
        
        with open('dist/BUILD_INFO.txt', 'w', encoding='utf-8') as f:
            f.write(build_info)
        
        print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª BUILD_INFO.txt")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å BUILD_INFO.txt: {e}")


def copy_additional_files():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –±–∏–ª–¥"""
    files_to_copy = [
        ('README.md', 'dist/README.md'),
        ('requirements.txt', 'dist/requirements.txt')
    ]
    
    for src, dst in files_to_copy:
        if os.path.exists(src):
            try:
                shutil.copy2(src, dst)
                print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {src} -> {dst}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {src}: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–¥–∞ –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –î–æ–º"')
    parser.add_argument('--onefile', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω exe —Ñ–∞–π–ª')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º')
    parser.add_argument('--clean', action='store_true', help='–¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å –±–∏–ª–¥—ã')
    
    args = parser.parse_args()
    
    print("üèõÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π –î–æ–º - –°–±–æ—Ä–∫–∞ –±–∏–ª–¥–∞ üèõÔ∏è")
    print("=" * 50)
    
    # –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞
    if args.clean:
        clean_build_dirs()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyInstaller
    if not check_pyinstaller():
        print("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyInstaller –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("pip install pyinstaller")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–∏–ª–¥–æ–≤
    clean_build_dirs()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('main.py'):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not os.path.exists('data/balance_config.json'):
        print("‚ùå –§–∞–π–ª data/balance_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è PyInstaller
    pyinstaller_args = get_pyinstaller_args(args.onefile, args.debug)
    
    print(f"\nüîß –ö–æ–º–∞–Ω–¥–∞ PyInstaller:")
    print(' '.join(pyinstaller_args))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–¥–∞
    print("\nüöÄ –ó–∞–ø—É—Å–∫ PyInstaller...")
    try:
        result = subprocess.run(pyinstaller_args, check=True)
        print("‚úÖ –ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–ª–¥–∞: {e}")
        return
    except FileNotFoundError:
        print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    create_build_info()
    copy_additional_files()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    exe_path = 'dist/TradingHouse.exe'
    if os.path.exists(exe_path):
        size_mb = os.path.getsize(exe_path) / (1024 * 1024)
        print(f"\nüéâ –ë–∏–ª–¥ –≥–æ—Ç–æ–≤!")
        print(f"üìç –ü—É—Ç—å: {os.path.abspath(exe_path)}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
        
        print(f"\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print(f"   GUI –≤–µ—Ä—Å–∏—è: {exe_path}")
        print(f"   CLI –≤–µ—Ä—Å–∏—è: {exe_path} cli")
    else:
        print("\n‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    print(f"\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist:")
    if os.path.exists('dist'):
        for item in os.listdir('dist'):
            item_path = os.path.join('dist', item)
            if os.path.isdir(item_path):
                print(f"   üìÅ {item}/")
            else:
                size = os.path.getsize(item_path)
                print(f"   üìÑ {item} ({size} bytes)")


if __name__ == "__main__":
    main()
