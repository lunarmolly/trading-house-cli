"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π –≤ –∏–≥—Ä–µ
"""

import os
import random
import threading
import time
from typing import List, Optional

try:
    import pygame
    PYGAME_AVAILABLE = True
except ImportError:
    pygame = None
    PYGAME_AVAILABLE = False
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: pygame –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú—É–∑—ã–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pygame")


class AudioManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π"""
    
    def __init__(self, music_folder: str = "data/music", volume: float = 0.5):
        self.music_folder = music_folder
        self.volume = volume
        self.playlist: List[str] = []
        self.current_track_index = 0
        self.is_playing = False
        self.is_enabled = PYGAME_AVAILABLE
        self.shuffle_mode = True  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
        self._music_thread: Optional[threading.Thread] = None
        self._stop_event = threading.Event()
        
        if self.is_enabled:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                pygame.mixer.pre_init(frequency=22050, size=-16, channels=2, buffer=1024)
                pygame.mixer.init()
                pygame.mixer.music.set_volume(self.volume)
                self._load_playlist()
                print("üéµ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {e}")
                print("üéµ –ú—É–∑—ã–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                self.is_enabled = False
    
    def _load_playlist(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not os.path.exists(self.music_folder):
            print(f"–ü–∞–ø–∫–∞ —Å –º—É–∑—ã–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.music_folder}")
            return
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        supported_formats = ('.mp3', '.ogg', '.wav', '.m4a')
        
        self.playlist = []
        for file in os.listdir(self.music_folder):
            if file.lower().endswith(supported_formats):
                self.playlist.append(os.path.join(self.music_folder, file))
        
        if self.playlist:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(self.playlist)} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            if self.shuffle_mode:
                self._shuffle_playlist()
        else:
            print("–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ music")
    
    def _shuffle_playlist(self) -> None:
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        if self.playlist:
            random.shuffle(self.playlist)
            self.current_track_index = 0
    
    def start_music(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏"""
        if not self.is_enabled or not self.playlist:
            return
        
        if self.is_playing:
            return
        
        self.is_playing = True
        self._stop_event.clear()
        self._music_thread = threading.Thread(target=self._music_loop, daemon=True)
        self._music_thread.start()
        print("üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    def stop_music(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏"""
        if not self.is_enabled:
            return
        
        self.is_playing = False
        self._stop_event.set()
        
        try:
            if pygame and PYGAME_AVAILABLE:
                pygame.mixer.music.stop()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º—É–∑—ã–∫–∏: {e}")
        
        if self._music_thread and self._music_thread.is_alive():
            self._music_thread.join(timeout=1.0)
        
        print("üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    def _music_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏"""
        while self.is_playing and not self._stop_event.is_set():
            try:
                if self.playlist and self.is_enabled:
                    current_track = self.playlist[self.current_track_index]
                    print(f"üéµ –ò–≥—Ä–∞–µ—Ç: {os.path.basename(current_track)}")
                    
                    if PYGAME_AVAILABLE:
                        pygame.mixer.music.load(current_track)
                        pygame.mixer.music.play()
                        
                        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
                        while (pygame.mixer.music.get_busy() and 
                               self.is_playing and 
                               not self._stop_event.is_set()):
                            time.sleep(0.5)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
                    self._next_track()
                else:
                    time.sleep(1)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
                time.sleep(2)
                self._next_track()
    
    def _next_track(self) -> None:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É"""
        if not self.playlist:
            return
        
        self.current_track_index += 1
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        if self.current_track_index >= len(self.playlist):
            self.current_track_index = 0
            if self.shuffle_mode:
                self._shuffle_playlist()
                print("üîÄ –ü–ª–µ–π–ª–∏—Å—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω")
    def set_volume(self, volume: float) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0.0 - 1.0)"""
        self.volume = max(0.0, min(1.0, volume))
        if self.is_enabled and pygame and PYGAME_AVAILABLE:
            try:
                pygame.mixer.music.set_volume(self.volume)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
    
    def get_volume(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        return self.volume
  
    
    def get_current_track(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        if self.playlist and 0 <= self.current_track_index < len(self.playlist):
            return os.path.basename(self.playlist[self.current_track_index])
        return None
    
    def get_playlist_info(self) -> dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ"""
        return {
            "total_tracks": len(self.playlist),
            "current_index": self.current_track_index + 1 if self.playlist else 0,
            "current_track": self.get_current_track(),
            "shuffle_mode": self.shuffle_mode,
            "is_playing": self.is_playing,
            "volume": self.volume,
            "enabled": self.is_enabled
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É–¥–∏–æ
audio_manager = AudioManager()
