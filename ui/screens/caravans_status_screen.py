"""
–≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –¥–ª—è –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º"
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä–∞–≤–∞–Ω–∞—Ö –≤ –ø—É—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–∞—Ö
"""

import customtkinter as ctk
from typing import Optional, Dict, List, Callable

from core.game import Game
from ui.screens.difficulty_screen import RomanTheme


class CaravansStatusScreen(ctk.CTkFrame):
    """
    –≠–∫—Ä–∞–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤:
    - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã (–≤ –ø—É—Ç–∏)
    - –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã
    """
    
    def __init__(self, parent, game: Game, on_back: Callable[[], None]):
        super().__init__(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=0
        )
        self.game = game
        self.on_back = on_back
        
        self.create_widgets()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤"""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=0
        )
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            main_container,
            text="üèõÔ∏è –ö–ê–†–ê–í–ê–ù–´ –ò –¢–û–†–ì–û–í–´–ï –ú–ò–°–°–ò–ò üèõÔ∏è",
            font=RomanTheme.FONT_TITLE,
            text_color=RomanTheme.ACCENT
        )
        title_label.pack(pady=(20, 30))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scrollable_container = ctk.CTkScrollableFrame(
            main_container,
            fg_color=RomanTheme.BACKGROUND,
            scrollbar_fg_color=RomanTheme.BUTTON,
            scrollbar_button_color=RomanTheme.BUTTON_HOVER,
            scrollbar_button_hover_color=RomanTheme.BUTTON_HOVER
        )
        scrollable_container.pack(fill="both", expand=True, padx=10, pady=10)        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        active_caravans = []
        completed_reports = []
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã - —Ç–µ, —á—Ç–æ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        for caravan in self.game.active_caravans:
            if self.game.current_cycle < caravan.return_cycle:
                active_caravans.append(caravan)
                
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã - –±–µ—Ä–µ–º –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
        completed_reports = self.game.caravan_reports[-10:]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤: {len(active_caravans)}")
        print(f"DEBUG: –í—Å–µ–≥–æ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –≤ –∏–≥—Ä–µ: {len(self.game.active_caravans)}")
        print(f"DEBUG: –û—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(completed_reports)}")
        print(f"DEBUG: –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {len(self.game.caravan_reports)}")
        print(f"DEBUG: –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª: {self.game.current_cycle}")
                
        # –ë–ª–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
        if active_caravans:
            self.create_caravans_section(
                scrollable_container,
                "üí† –ö–ê–†–ê–í–ê–ù–´ –í –ü–£–¢–ò",
                active_caravans,
                is_active=True
            )
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
            no_active_label = ctk.CTkLabel(
                scrollable_container,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –≤ –ø—É—Ç–∏",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.TEXT
            )
            no_active_label.pack(pady=20)
            
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(
            scrollable_container,
            height=2,
            fg_color=RomanTheme.NEUTRAL
        )
        separator.pack(fill="x", padx=30, pady=20)
              # –ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
        if completed_reports:
            self.create_completed_reports_section(
                scrollable_container,
                "üèÅ –ó–ê–í–ï–†–®–Å–ù–ù–´–ï –ö–ê–†–ê–í–ê–ù–´",
                completed_reports
            )
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
            no_completed_label = ctk.CTkLabel(
                scrollable_container,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.TEXT
            )
            no_completed_label.pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        info_text = "–ö–∞—Ä–∞–≤–∞–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –†–∏–º –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–∏–±—ã–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ø—É—Ç–∏ –∏ –Ω–∞ —Ä—ã–Ω–∫–∞—Ö –≥–æ—Ä–æ–¥–æ–≤."
        info_label = ctk.CTkLabel(
            main_container,
            text=info_text,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.TEXT
        )
        info_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_button = ctk.CTkButton(
            main_container,
            text="‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            font=RomanTheme.FONT_BUTTON,
            fg_color=RomanTheme.BUTTON,
            hover_color=RomanTheme.BUTTON_HOVER,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=10,
            width=250,
            height=40,
            command=self.on_back
        )
        back_button.pack(pady=20)
    
    def create_caravans_section(self, parent, title: str, caravans: list, is_active: bool):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–µ–∫—Ü–∏—é —Å –∫–∞—Ä–∞–≤–∞–Ω–∞–º–∏ (–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏)
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            caravans: –°–ø–∏—Å–æ–∫ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
            is_active: True –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤, False –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö
        """
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–∫—Ü–∏–∏
        section_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_width=2,
            border_color=RomanTheme.FRAME_BORDER,
            corner_radius=10
        )
        section_frame.pack(fill="x", padx=10, pady=10, ipady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            section_frame,
            text=title,
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.ACCENT
        )
        section_label.pack(pady=(10, 15))
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä–∞–≤–∞–Ω—ã –≤ —Å–µ–∫—Ü–∏–∏
        for idx, caravan in enumerate(caravans):
            self.create_caravan_card(section_frame, caravan, is_active)
              # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if idx < len(caravans) - 1:
                separator = ctk.CTkFrame(
                    section_frame,
                    height=1,
                    fg_color=RomanTheme.NEUTRAL
                )
                separator.pack(fill="x", padx=60, pady=10)
    
    def create_caravan_card(self, parent, caravan, is_active: bool):
        """
        –°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä–∞–≤–∞–Ω–µ
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            caravan: –û–±—ä–µ–∫—Ç –∫–∞—Ä–∞–≤–∞–Ω–∞
            is_active: True –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤, False –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö
        """
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        card_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=5
        )
        card_frame.pack(fill="x", padx=20, pady=10)
        
        # –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        header_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
        header_frame.pack(fill="x", pady=5, padx=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        city_name = ctk.CTkLabel(
            header_frame,
            text=f"üèôÔ∏è {caravan.destination.name}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        city_name.pack(side="left", padx=(0, 20))
        
        # –°—Ç–∞—Ç—É—Å
        status_text = "–í –ø—É—Ç–∏" if is_active else "–ó–∞–≤–µ—Ä—à—ë–Ω"
        status_color = "#6d6923" if is_active else "#8b6f47"  # –û–ª–∏–≤–∫–æ–≤—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö, –±—Ä–æ–Ω–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        status_label = ctk.CTkLabel(
            header_frame,
            text=f"–°—Ç–∞—Ç—É—Å: {status_text}",
            font=RomanTheme.FONT_TEXT,
            text_color=status_color
        )
        status_label.pack(side="right", padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–∏–∫–ª–∞—Ö
        cycles_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
        cycles_frame.pack(fill="x", pady=5, padx=10)
        
        cycles_text = f"–û—Ç–ø—Ä–∞–≤–∫–∞: {caravan.departure_cycle} ‚ü∂ –í–æ–∑–≤—Ä–∞—Ç: {caravan.return_cycle}"
        cycles_label = ctk.CTkLabel(
            cycles_frame,
            text=cycles_text,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.TEXT
        )
        cycles_label.pack(side="left")
        
        # –°–æ–±—ã—Ç–∏–µ –≤ –ø—É—Ç–∏
        event_text = caravan.event_occurred if caravan.event_occurred else "–°–æ–±—ã—Ç–∏–π –Ω–µ –±—ã–ª–æ"
        event_label = ctk.CTkLabel(
            cycles_frame,
            text=f"–°–æ–±—ã—Ç–∏–µ: {event_text}",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.ACCENT
        )
        event_label.pack(side="right", padx=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        goods_frame = ctk.CTkFrame(
            card_frame, 
            fg_color=RomanTheme.BACKGROUND,
            border_width=1,
            border_color=RomanTheme.NEUTRAL,
            corner_radius=5
        )
        goods_frame.pack(fill="x", pady=10, padx=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        headers_frame = ctk.CTkFrame(goods_frame, fg_color=RomanTheme.BACKGROUND)
        headers_frame.pack(fill="x", pady=(5, 0), padx=5)
        
        col_widths = [250, 60]
        headers = ["–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ"]
        
        for i, header in enumerate(headers):
            header_label = ctk.CTkLabel(
                headers_frame,
                text=header,
                font=(RomanTheme.FONT_FAMILY, 12, "bold"),
                width=col_widths[i] if i < len(col_widths) else 0,
                text_color=RomanTheme.TEXT
            )
            header_label.pack(side="left", padx=5)
        
        # –¢–æ–Ω–∫–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(goods_frame, height=1, fg_color=RomanTheme.NEUTRAL)
        separator.pack(fill="x", padx=5, pady=(2, 5))
          # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        total_cost = 0  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        goods_dict = {g.name: g for g in self.game.goods}
        
        for name, quantity in caravan.goods.items():
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
            if name in goods_dict:
                item_cost = goods_dict[name].base_price * quantity
                total_cost += item_cost
            else:
                item_cost = 0
                
            # –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            item_frame = ctk.CTkFrame(goods_frame, fg_color=RomanTheme.BACKGROUND)
            item_frame.pack(fill="x", pady=1, padx=5)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_label = ctk.CTkLabel(
                item_frame,
                text=name,
                font=RomanTheme.FONT_SMALL,
                width=col_widths[0],
                anchor="w",
                text_color=RomanTheme.TEXT
            )
            name_label.pack(side="left", padx=5)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_label = ctk.CTkLabel(
                item_frame,
                text=str(quantity),
                font=RomanTheme.FONT_SMALL,
                width=col_widths[1],
                text_color=RomanTheme.TEXT
            )
            qty_label.pack(side="left", padx=5)
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
            if item_cost > 0:
                cost_label = ctk.CTkLabel(
                    item_frame,
                    text=f"{item_cost} ü™ô",
                    font=RomanTheme.FONT_SMALL,
                    text_color=RomanTheme.TEXT
                )
                cost_label.pack(side="left", padx=5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
        if not is_active:
            # –ò—â–µ–º –æ—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞—Ä–∞–≤–∞–Ω–∞
            report = self.find_caravan_report(caravan)
            if report:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–±—ã–ª–∏
                finance_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
                finance_frame.pack(fill="x", pady=5, padx=20)
                
                # –ü—Ä–∏–±—ã–ª—å
                profit_text = f"–ü—Ä–∏–±—ã–ª—å: {report['profit']} ü™ô"
                profit_label = ctk.CTkLabel(
                    finance_frame,
                    text=profit_text,
                    font=RomanTheme.FONT_TEXT,
                    text_color="#6b8e23"  # –ó–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
                )
                profit_label.pack(side="left", padx=5)
                
                # –†–∞—Å—Ö–æ–¥—ã
                expenses_text = f"–†–∞—Å—Ö–æ–¥—ã: {report['expenses']} ü™ô"
                expenses_label = ctk.CTkLabel(
                    finance_frame,
                    text=expenses_text,
                    font=RomanTheme.FONT_TEXT,
                    text_color="#cd853f"  # –ö–æ—Ä–∏—á–Ω–µ–≤–∞—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                )
                expenses_label.pack(side="left", padx=20)
                
                # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                net_color = "#6b8e23" if report["net"] >= 0 else "#cd5c5c"  # –ó–µ–ª–µ–Ω—ã–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π
                net_text = f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {report['net']} ü™ô"
                net_label = ctk.CTkLabel(
                    finance_frame,
                    text=net_text,
                    font=(RomanTheme.FONT_FAMILY, 14, "bold"),
                    text_color=net_color
                )
                net_label.pack(side="right", padx=5)
    def find_caravan_report(self, caravan):
        """
        –ü–æ–∏—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–∞—Ä–∞–≤–∞–Ω–∞
        
        Args:
            caravan: –û–±—ä–µ–∫—Ç –∫–∞—Ä–∞–≤–∞–Ω–∞
            
        Returns:
            Dict: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∏–≥—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        goods_dict = {g.name: g for g in self.game.goods}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
        total_purchase_cost = 0
        for name, quantity in caravan.goods.items():
            if name in goods_dict:
                total_purchase_cost += goods_dict[name].base_price * quantity
                
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ø—Ä–∏–±—ã–ª—å
        event_mod = 1.0
        extra_expenses = 0
        
        if caravan.event_occurred:
            if "—Ä–∞–∑–±–æ–π–Ω–∏–∫" in caravan.event_occurred.lower():
                event_mod = 0.6  # –ü–æ—Ç–µ—Ä—è–ª–∏ 40% —Ç–æ–≤–∞—Ä–æ–≤
            elif "–ø–æ–ª–æ–º–∫–∞" in caravan.event_occurred.lower():
                extra_expenses = 30
            elif "–±–æ–ª–µ–∑–Ω—å" in caravan.event_occurred.lower():
                extra_expenses = 15
            elif "—Å–º–µ—Ä—Ç—å" in caravan.event_occurred.lower():
                event_mod = 0.0  # –ü–æ–ª–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ç–æ–≤–∞—Ä–æ–≤

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        # –∏ —Å–ø—Ä–æ—Å–∞ –≤ –≥–æ—Ä–æ–¥–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        city_mod = 1.0 + (caravan.destination.duration * 0.02)
        profit = int(total_purchase_cost * city_mod * event_mod)
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
        travel_days = caravan.days_to_travel * 2 + 1  # —Ç—É–¥–∞, –æ–±—Ä–∞—Ç–Ω–æ + –¥–µ–Ω—å –≤ –≥–æ—Ä–æ–¥–µ
        expenses = int(10 * travel_days) + extra_expenses  # –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return {
            "profit": profit,
            "expenses": expenses,
            "net": profit - expenses,
            "event_path": caravan.event_occurred or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            "event_city": caravan.destination.current_event or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            "sale_breakdown": {},  # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º
            "success": profit > expenses
        }
    
    def create_completed_reports_section(self, parent, title: str, reports: list):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–µ–∫—Ü–∏—é —Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞–º–∏ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            reports: –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–∞—Ö
        """
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–∫—Ü–∏–∏
        section_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_width=2,
            border_color=RomanTheme.FRAME_BORDER,
            corner_radius=10
        )
        section_frame.pack(fill="x", padx=10, pady=10, ipady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            section_frame,
            text=title,
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.ACCENT
        )
        section_label.pack(pady=(10, 15))
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
        for idx, report in enumerate(reversed(reports)):
            self.create_completed_report_card(section_frame, report)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if idx < len(reports) - 1:
                separator = ctk.CTkFrame(
                    section_frame,
                    height=1,
                    fg_color=RomanTheme.NEUTRAL
                )
                separator.pack(fill="x", padx=60, pady=10)

    def create_completed_report_card(self, parent, report):
        """
        –°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∫–∞—Ä–∞–≤–∞–Ω–µ
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            report: –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∫–∞—Ä–∞–≤–∞–Ω–µ
        """
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        card_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=5
        )
        card_frame.pack(fill="x", padx=20, pady=10)
        
        # –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        header_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
        header_frame.pack(fill="x", pady=5, padx=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        city_name = ctk.CTkLabel(
            header_frame,
            text=f"üèôÔ∏è {report['destination']}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        city_name.pack(side="left", padx=(0, 20))
        
        # –°—Ç–∞—Ç—É—Å
        status_label = ctk.CTkLabel(
            header_frame,
            text="–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à—ë–Ω",
            font=RomanTheme.FONT_TEXT,
            text_color="#8b6f47"  # –ë—Ä–æ–Ω–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        )
        status_label.pack(side="right", padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–∏–∫–ª–∞—Ö
        cycles_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
        cycles_frame.pack(fill="x", pady=5, padx=10)
        
        cycles_text = f"–û—Ç–ø—Ä–∞–≤–∫–∞: {report['departure_cycle']} ‚ü∂ –í–æ–∑–≤—Ä–∞—Ç: {report['return_cycle']} ‚ü∂ –ó–∞–≤–µ—Ä—à—ë–Ω: {report['completion_cycle']}"
        cycles_label = ctk.CTkLabel(
            cycles_frame,
            text=cycles_text,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.TEXT
        )
        cycles_label.pack(side="left")
        
        # –°–æ–±—ã—Ç–∏—è
        events_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
        events_frame.pack(fill="x", pady=5, padx=10)
        
        event_path = report.get("event_path", "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π")
        event_city = report.get("event_city", "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π")
        
        path_label = ctk.CTkLabel(
            events_frame,
            text=f"–°–æ–±—ã—Ç–∏–µ –≤ –ø—É—Ç–∏: {event_path}",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.ACCENT
        )
        path_label.pack(side="left", padx=(0, 20))
        
        city_label = ctk.CTkLabel(
            events_frame,
            text=f"–°–æ–±—ã—Ç–∏–µ –≤ –≥–æ—Ä–æ–¥–µ: {event_city}",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.ACCENT
        )
        city_label.pack(side="left")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        goods_frame = ctk.CTkFrame(
            card_frame, 
            fg_color=RomanTheme.BACKGROUND,
            border_width=1,
            border_color=RomanTheme.NEUTRAL,
            corner_radius=5
        )
        goods_frame.pack(fill="x", pady=10, padx=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        headers_frame = ctk.CTkFrame(goods_frame, fg_color=RomanTheme.BACKGROUND)
        headers_frame.pack(fill="x", pady=(5, 0), padx=5)
        
        col_widths = [200, 60, 100, 100]
        headers = ["–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞ –µ–¥.", "–û–±—â–∞—è —Ü–µ–Ω–∞"]
        
        for i, header in enumerate(headers):
            header_label = ctk.CTkLabel(
                headers_frame,
                text=header,
                font=(RomanTheme.FONT_FAMILY, 12, "bold"),
                width=col_widths[i] if i < len(col_widths) else 0,
                text_color=RomanTheme.TEXT
            )
            header_label.pack(side="left", padx=5)
        
        # –¢–æ–Ω–∫–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(goods_frame, height=1, fg_color=RomanTheme.NEUTRAL)
        separator.pack(fill="x", padx=5, pady=(2, 5))
        
        # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        sale_breakdown = report.get("sale_breakdown", {})
        goods_data = report.get("goods", {})
        
        for name, quantity in goods_data.items():
            # –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            item_frame = ctk.CTkFrame(goods_frame, fg_color=RomanTheme.BACKGROUND)
            item_frame.pack(fill="x", pady=1, padx=5)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_label = ctk.CTkLabel(
                item_frame,
                text=name,
                font=RomanTheme.FONT_SMALL,
                width=col_widths[0],
                anchor="w",
                text_color=RomanTheme.TEXT
            )
            name_label.pack(side="left", padx=5)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_label = ctk.CTkLabel(
                item_frame,
                text=str(quantity),
                font=RomanTheme.FONT_SMALL,
                width=col_widths[1],
                text_color=RomanTheme.TEXT
            )
            qty_label.pack(side="left", padx=5)
            
            # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏ –æ–±—â–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if name in sale_breakdown:
                unit_price = sale_breakdown[name]["unit_price"]
                total_price = unit_price * quantity
                
                unit_price_label = ctk.CTkLabel(
                    item_frame,
                    text=f"{unit_price} ü™ô",
                    font=RomanTheme.FONT_SMALL,
                    width=col_widths[2],
                    text_color=RomanTheme.TEXT
                )
                unit_price_label.pack(side="left", padx=5)
                
                total_price_label = ctk.CTkLabel(
                    item_frame,
                    text=f"{total_price} ü™ô",
                    font=RomanTheme.FONT_SMALL,
                    width=col_widths[3],
                    text_color=RomanTheme.TEXT
                )
                total_price_label.pack(side="left", padx=5)
            else:
                # –ó–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                unit_price_label = ctk.CTkLabel(
                    item_frame,
                    text="‚Äî",
                    font=RomanTheme.FONT_SMALL,
                    width=col_widths[2],
                    text_color=RomanTheme.NEUTRAL
                )
                unit_price_label.pack(side="left", padx=5)
                
                total_price_label = ctk.CTkLabel(
                    item_frame,
                    text="‚Äî",
                    font=RomanTheme.FONT_SMALL,
                    width=col_widths[3],
                    text_color=RomanTheme.NEUTRAL
                )
                total_price_label.pack(side="left", padx=5)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        finance_frame = ctk.CTkFrame(card_frame, fg_color=RomanTheme.BACKGROUND)
        finance_frame.pack(fill="x", pady=5, padx=20)
        
        # –ü—Ä–∏–±—ã–ª—å
        profit_text = f"–ü—Ä–∏–±—ã–ª—å: {report['profit']} ü™ô"
        profit_label = ctk.CTkLabel(
            finance_frame,
            text=profit_text,
            font=RomanTheme.FONT_TEXT,
            text_color="#6b8e23"  # –ó–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
        )
        profit_label.pack(side="left", padx=5)
        
        # –†–∞—Å—Ö–æ–¥—ã
        expenses_text = f"–†–∞—Å—Ö–æ–¥—ã: {report['expenses']} ü™ô"
        expenses_label = ctk.CTkLabel(
            finance_frame,
            text=expenses_text,
            font=RomanTheme.FONT_TEXT,
            text_color="#cd853f"  # –ö–æ—Ä–∏—á–Ω–µ–≤–∞—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        )
        expenses_label.pack(side="left", padx=20)
        
        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        net_value = report.get('net', 0)
        net_color = "#6b8e23" if net_value >= 0 else "#cd5c5c"  # –ó–µ–ª–µ–Ω—ã–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π
        net_text = f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_value} ü™ô"
        net_label = ctk.CTkLabel(
            finance_frame,
            text=net_text,
            font=(RomanTheme.FONT_FAMILY, 14, "bold"),
            text_color=net_color
        )
        net_label.pack(side="right", padx=5)