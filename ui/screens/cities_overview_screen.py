"""
–≠–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º" - –î—Ä–µ–≤–Ω–∏–π –†–∏–º
"""

import customtkinter as ctk
from typing import Callable
from core.game import Game
from models.city import City


class RomanTheme:
    """–†–∏–º—Å–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    BACKGROUND = "#f0e5d1"  # –°–≤–µ—Ç–ª–æ-–±–µ–∂–µ–≤—ã–π —Ñ–æ–Ω
    BUTTON = "#947153"      # –ö–æ—Ä–∏—á–Ω–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    BUTTON_HOVER = "#8b6946"  # –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    ACCENT = "#b8762f"      # –ó–æ–ª–æ—Ç–∏—Å—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
    TEXT = "#372e29"        # –¢–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ç–µ–∫—Å—Ç
    SUCCESS = "#6b8e23"     # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
    WARNING = "#cd853f"     # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    ERROR = "#8b4513"       # –ö—Ä–∞—Å–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
    NEUTRAL = "#8a7968"     # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    FRAME_BORDER = "#372e29"  # –ì—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–µ–π–º–æ–≤
    
    # –®—Ä–∏—Ñ—Ç—ã
    FONT_TITLE = ("Georgia", 32, "bold")
    FONT_HEADER = ("Georgia", 18, "bold")
    FONT_BUTTON = ("Georgia", 14, "bold")
    FONT_TEXT = ("Georgia", 12)
    FONT_SMALL = ("Georgia", 10)


class CitiesOverviewScreen(ctk.CTkFrame):
    """–≠–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    
    def __init__(self, parent, game: Game, on_back: Callable):
        super().__init__(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=0
        )
        self.game = game
        self.on_back = on_back
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=120
        )
        header_frame.pack(fill="x", pady=(20, 0))
        header_frame.pack_propagate(False)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üèõÔ∏è –û–ë–ó–û–† –ì–û–†–û–î–û–í –ò–ú–ü–ï–†–ò–ò üèõÔ∏è",
            font=RomanTheme.FONT_TITLE,
            text_color=RomanTheme.ACCENT
        )
        title_label.pack(pady=(20, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
        info_label = ctk.CTkLabel(
            header_frame,
            text=f"üìÖ –¶–∏–∫–ª: {self.game.current_cycle}/{self.game.max_cycles} | üèõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {len(self.game.cities)}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        info_label.pack(pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        main_scrollable = ctk.CTkScrollableFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            scrollbar_button_color=RomanTheme.BUTTON,
            scrollbar_button_hover_color=RomanTheme.BUTTON_HOVER
        )
        main_scrollable.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–æ—Ä–æ–¥–æ–≤
        self.create_cities_table(main_scrollable)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel()
    
    def create_cities_table(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ä–æ–¥–æ–≤"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        table_header_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.ACCENT,
            corner_radius=10,
            height=50
        )
        table_header_frame.pack(fill="x", pady=(20, 15), padx=20)
        table_header_frame.pack_propagate(False)
        
        header_title_label = ctk.CTkLabel(
            table_header_frame,
            text="üó∫Ô∏è –ö–ê–†–¢–ê –¢–û–†–ì–û–í–´–• –ì–û–†–û–î–û–í üó∫Ô∏è",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        header_title_label.pack(expand=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_container = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10
        )
        table_container.pack(fill="x", pady=(0, 20), padx=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers_frame = ctk.CTkFrame(
            table_container,
            fg_color=RomanTheme.NEUTRAL,
            corner_radius=8,
            height=45
        )
        headers_frame.pack(fill="x", pady=15, padx=15)
        headers_frame.pack_propagate(False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers_frame.grid_columnconfigure(0, weight=3)  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        headers_frame.grid_columnconfigure(1, weight=2)  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        headers_frame.grid_columnconfigure(2, weight=3)  # –¢–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        headers_frame.grid_columnconfigure(3, weight=4)  # –°–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        headers_frame.grid_columnconfigure(4, weight=2)  # –°—Ç–∞—Ç—É—Å –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
        
        headers = ["üèõÔ∏è –ì–æ—Ä–æ–¥", "üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ", "üé≠ –°–æ–±—ã—Ç–∏–µ", "üìà –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å", "üöõ –ö–∞—Ä–∞–≤–∞–Ω—ã"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(
                headers_frame,
                text=header,
                font=RomanTheme.FONT_BUTTON,
                text_color=RomanTheme.BACKGROUND
            )
            label.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
        
        # –°—Ç—Ä–æ–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
        cities_rows_frame = ctk.CTkFrame(
            table_container,
            fg_color=RomanTheme.BACKGROUND
        )
        cities_rows_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        for i, city in enumerate(self.game.cities):
            self.create_city_row(cities_rows_frame, city, i)
    
    def create_city_row(self, parent, city: City, row_index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–µ"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≥–æ—Ä–æ–¥–∞
        city_row_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND if row_index % 2 == 0 else "#ebe0d3",
            border_color=RomanTheme.NEUTRAL,
            border_width=1,
            corner_radius=5,
            height=60
        )
        city_row_frame.pack(fill="x", pady=2)
        city_row_frame.pack_propagate(False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
        city_row_frame.grid_columnconfigure(0, weight=3)
        city_row_frame.grid_columnconfigure(1, weight=2)
        city_row_frame.grid_columnconfigure(2, weight=3)
        city_row_frame.grid_columnconfigure(3, weight=4)
        city_row_frame.grid_columnconfigure(4, weight=2)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        city_name_label = ctk.CTkLabel(
            city_row_frame,
            text=f"üèõÔ∏è {city.name}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT,
            anchor="w"
        )
        city_name_label.grid(row=0, column=0, padx=10, pady=8, sticky="ew")
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance_label = ctk.CTkLabel(
            city_row_frame,
            text=f"{city.distance} –¥–Ω–µ–π",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        distance_label.grid(row=0, column=1, padx=10, pady=8, sticky="ew")
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        event_text = city.current_event or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è"
        event_color = RomanTheme.WARNING if city.current_event else RomanTheme.NEUTRAL
        event_label = ctk.CTkLabel(
            city_row_frame,
            text=f"üé≠ {event_text}",
            font=RomanTheme.FONT_SMALL,
            text_color=event_color
        )
        event_label.grid(row=0, column=2, padx=10, pady=8, sticky="ew")
        
        # –°–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º)
        high_demand_goods = self.get_high_demand_goods(city)
        demand_text = ", ".join(high_demand_goods) if high_demand_goods else "–û–±—ã—á–Ω—ã–π —Å–ø—Ä–æ—Å"
        demand_label = ctk.CTkLabel(
            city_row_frame,
            text=demand_text,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.SUCCESS if high_demand_goods else RomanTheme.NEUTRAL,
            wraplength=200
        )
        demand_label.grid(row=0, column=3, padx=10, pady=8, sticky="ew")
        
        # –°—Ç–∞—Ç—É—Å –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
        caravan_status = self.get_caravan_status_for_city(city)
        caravan_color = RomanTheme.ACCENT if caravan_status != "–°–≤–æ–±–æ–¥–µ–Ω" else RomanTheme.SUCCESS
        caravan_label = ctk.CTkLabel(
            city_row_frame,
            text=caravan_status,
            font=RomanTheme.FONT_SMALL,
            text_color=caravan_color
        )
        caravan_label.grid(row=0, column=4, padx=10, pady=8, sticky="ew")
    
    def get_high_demand_goods(self, city: City) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º –≤ –≥–æ—Ä–æ–¥–µ"""
        high_demand = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞
        for good_name, modifier in city.demand_modifiers.items():
            if modifier > 1.2:  # –ï—Å–ª–∏ —Å–ø—Ä–æ—Å –±–æ–ª—å—à–µ 120%
                high_demand.append(good_name)
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        if city.current_event and city.current_event in self.game.config.get("event_modifiers", {}):
            event_modifiers = self.game.config["event_modifiers"][city.current_event]
            for good_name, modifier in event_modifiers.items():
                if modifier > 1.3 and good_name not in high_demand:  # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–∞–µ—Ç –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
                    high_demand.append(f"{good_name}*")  # –ü–æ–º–µ—á–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–æ–π —Ç–æ–≤–∞—Ä—ã –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
        
        return high_demand[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    
    def get_caravan_status_for_city(self, city: City) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã
        active_caravans_to_city = [
            caravan for caravan in self.game.active_caravans 
            if caravan.destination.name == city.name
        ]
        
        if not active_caravans_to_city:
            return "–°–≤–æ–±–æ–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä–∞–≤–∞–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
        current_cycle_caravans = [
            caravan for caravan in active_caravans_to_city
            if caravan.departure_cycle == self.game.current_cycle
        ]
        
        if current_cycle_caravans:
            return "–ó–∞–Ω—è—Ç (—Ü–∏–∫–ª)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä–∞–≤–∞–Ω—ã –≤ –ø—É—Ç–∏
        traveling_caravans = [
            caravan for caravan in active_caravans_to_city
            if caravan.arrival_cycle > self.game.current_cycle
        ]
        
        if traveling_caravans:
            caravan = traveling_caravans[0]
            days_left = caravan.arrival_cycle - self.game.current_cycle
            return f"–í –ø—É—Ç–∏ ({days_left}–¥)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä–∞–≤–∞–Ω—ã –≤ –≥–æ—Ä–æ–¥–µ
        in_city_caravans = [
            caravan for caravan in active_caravans_to_city
            if caravan.arrival_cycle <= self.game.current_cycle < caravan.return_cycle
        ]
        
        if in_city_caravans:
            caravan = in_city_caravans[0]
            days_left = caravan.return_cycle - self.game.current_cycle
            return f"–í –≥–æ—Ä–æ–¥–µ ({days_left}–¥)"
        
        return "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è"
    
    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        bottom_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=80
        )
        bottom_frame.pack(side="bottom", fill="x", pady=10)
        bottom_frame.pack_propagate(False)
        
        back_button = ctk.CTkButton(
            bottom_frame,
            text="‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            font=RomanTheme.FONT_BUTTON,
            fg_color=RomanTheme.BUTTON,
            hover_color=RomanTheme.BUTTON_HOVER,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=8,
            width=250,
            height=50,
            command=self.on_back
        )
        back_button.pack(expand=True)


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
if __name__ == "__main__":
    import sys
    import os
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    
    from core.world import load_balance_config, generate_world
    from core.goods import load_goods
    from models.player import Player
    from models.courier import Courier
    from models.wagon import Wagon
    
    class MockGame:
        def __init__(self):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = load_balance_config()
            cities = generate_world(config)
            goods = load_goods(config)
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
            courier = Courier(name="–ú–∞—Ä–∫—É—Å", endurance=0, illness_resistance=0.9)
            wagon = Wagon(name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–≤–æ–∑–∫–∞", capacity=200, durability=0.9)
            
            player = Player(balance=5000)
            player.couriers = [courier]
            player.wagons = [wagon]
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä—É
            self.player = player
            self.cities = cities
            self.goods = goods
            self.config = config
            self.difficulty = "normal"
            self.current_cycle = 1
            self.max_cycles = 20
            self.active_caravans = []
    
    def test_back():
        print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    ctk.set_appearance_mode("light")
    root = ctk.CTk()
    root.title("–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤")
    root.geometry("1400x900")
    root.configure(fg_color=RomanTheme.BACKGROUND)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∏–≥—Ä—É
    mock_game = MockGame()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω
    screen = CitiesOverviewScreen(
        parent=root,
        game=mock_game,  # type: ignore
        on_back=test_back
    )
    screen.pack(fill="both", expand=True)
    
    root.mainloop()
