"""
–≠–∫—Ä–∞–Ω –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º"
–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ –î—Ä–µ–≤–Ω–∏–π –†–∏–º
"""

import customtkinter as ctk
from typing import Callable, Optional
from core.game import Game
from models.goods_item import GoodsItem


class RomanTheme:
    """–ê–Ω—Ç–∏—á–Ω–∞—è —Ä–∏–º—Å–∫–∞—è —Ç–µ–º–∞ –¥–ª—è GUI"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    BACKGROUND = "#f0e5d1"      # –§–æ–Ω (—Ü–≤–µ—Ç –ø–µ—Ä–≥–∞–º–µ–Ω—Ç–∞)
    ACCENT = "#6d6923"          # –ê–∫—Ü–µ–Ω—Ç—ã (–æ–ª–∏–≤–∫–æ–≤—ã–π)
    BUTTON = "#947153"          # –ö–Ω–æ–ø–∫–∏ –∏ –±–æ—Ä–¥—é—Ä—ã (–±—Ä–æ–Ω–∑–∞)
    TEXT = "#372e29"            # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—Ç–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
    NEUTRAL = "#acacac"         # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
    BUTTON_HOVER = "#a0815e"    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    FRAME_BORDER = "#8b6f47"    # –ë–æ—Ä–¥—é—Ä—ã —Ä–∞–º–æ–∫
    SUCCESS = "#6b8e23"         # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–æ–ª–∏–≤–∫–æ–≤–æ-–∑–µ–ª–µ–Ω—ã–π)
    WARNING = "#cd853f"         # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–µ—Å–æ—á–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
    ERROR = "#8b4513"           # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
    
    # –®—Ä–∏—Ñ—Ç—ã
    FONT_FAMILY = "Georgia"
    FONT_TITLE = ("Georgia", 28, "bold")
    FONT_HEADER = ("Georgia", 20, "bold")
    FONT_TEXT = ("Georgia", 14)
    FONT_BUTTON = ("Georgia", 16, "bold")
    FONT_SMALL = ("Georgia", 12)
    FONT_INFO = ("Georgia", 16)
    FONT_PRICE = ("Georgia", 14, "bold")


class ShopInventoryScreen(ctk.CTkFrame):
    """–≠–∫—Ä–∞–Ω –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self, parent, game: Game, on_back: Callable):
        super().__init__(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=0
        )
        self.game = game
        self.on_back = on_back
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        self.selected_good: Optional[GoodsItem] = None
        self.quantity_entry: Optional[ctk.CTkEntry] = None
        self.purchase_frame: Optional[ctk.CTkFrame] = None
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        header_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=120
        )
        header_frame.pack(fill="x", pady=(20, 0))
        header_frame.pack_propagate(False)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="üè™ –¢–û–†–ì–û–í–ê–Ø –ü–õ–û–©–ê–î–¨ üè™",
            font=RomanTheme.FONT_TITLE,
            text_color=RomanTheme.ACCENT
        )
        title_label.pack(pady=(20, 10))
        
        # –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        balance_label = ctk.CTkLabel(
            header_frame,
            text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {self.game.player.balance:,} –¥–µ–Ω–∞—Ä–∏–µ–≤",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.SUCCESS if self.game.player.balance >= 1000 else RomanTheme.TEXT
        )
        balance_label.pack(pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_scrollable = ctk.CTkScrollableFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            scrollbar_button_color=RomanTheme.BUTTON,
            scrollbar_button_hover_color=RomanTheme.BUTTON_HOVER
        )
        main_scrollable.pack(fill="both", expand=True, padx=20, pady=(10, 10))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π
        self.create_shop_section(main_scrollable)
        self.create_inventory_section(main_scrollable)
        self.create_bottom_panel()
    def create_shop_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
        shop_title_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.ACCENT,
            corner_radius=10,
            height=50
        )
        shop_title_frame.pack(fill="x", pady=(20, 15), padx=20)
        shop_title_frame.pack_propagate(False)
        
        shop_title_label = ctk.CTkLabel(
            shop_title_frame,
            text="‚öñÔ∏è –î–û–°–¢–£–ü–ù–´–ï –¢–û–í–ê–†–´ ‚öñÔ∏è",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        shop_title_label.pack(expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.goods_container = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10
        )
        self.goods_container.pack(fill="x", pady=(0, 20), padx=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        headers_frame = ctk.CTkFrame(
            self.goods_container,
            fg_color=RomanTheme.BUTTON,
            corner_radius=8,
            height=45
        )
        headers_frame.pack(fill="x", pady=(15, 10), padx=15)
        headers_frame.pack_propagate(False)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        self.create_table_header(headers_frame)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        self.goods_rows_frame = ctk.CTkFrame(
            self.goods_container,
            fg_color=RomanTheme.BACKGROUND
        )
        self.goods_rows_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        for i, good in enumerate(self.game.goods):
            self.create_goods_row(self.goods_rows_frame, good, i)
    def create_table_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π"""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        parent.grid_columnconfigure(0, weight=3, minsize=200)  # –¢–æ–≤–∞—Ä
        parent.grid_columnconfigure(1, weight=2, minsize=150)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        parent.grid_columnconfigure(2, weight=2, minsize=150)  # –¶–µ–Ω–∞
        parent.grid_columnconfigure(3, weight=2, minsize=120)  # –î–µ–π—Å—Ç–≤–∏–µ
        
        headers = [
            "–¢–æ–≤–∞—Ä",
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
            "–¶–µ–Ω–∞ –∑–∞ –µ–¥.",
            "–î–µ–π—Å—Ç–≤–∏–µ"
        ]
        
        for i, header_text in enumerate(headers):
            header_label = ctk.CTkLabel(
                parent,
                text=header_text,
                font=RomanTheme.FONT_BUTTON,
                text_color=RomanTheme.BACKGROUND
            )
            header_label.grid(row=0, column=i, padx=5, pady=5, sticky="ew")
    
    def create_goods_row(self, parent, good: GoodsItem, row_index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–æ–º —Å inline —Ñ–æ—Ä–º–æ–π –ø–æ–∫—É–ø–∫–∏"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–æ–∫–∏
        row_container = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND
        )
        row_container.pack(fill="x", pady=2)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
        main_row_frame = ctk.CTkFrame(
            row_container,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.NEUTRAL,
            border_width=1,
            corner_radius=5,
            height=45
        )
        main_row_frame.pack(fill="x", side="top")
        main_row_frame.pack_propagate(False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        main_row_frame.grid_columnconfigure(0, weight=3, minsize=200)
        main_row_frame.grid_columnconfigure(1, weight=2, minsize=150)
        main_row_frame.grid_columnconfigure(2, weight=2, minsize=150)
        main_row_frame.grid_columnconfigure(3, weight=2, minsize=120)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        name_label = ctk.CTkLabel(
            main_row_frame,
            text=good.name,
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT,
            anchor="w"
        )
        name_label.grid(row=0, column=0, padx=10, pady=8, sticky="ew")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_label = ctk.CTkLabel(
            main_row_frame,
            text=good.category,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.NEUTRAL,
            anchor="center"
        )
        category_label.grid(row=0, column=1, padx=5, pady=8, sticky="ew")
        
        # –¶–µ–Ω–∞
        price_label = ctk.CTkLabel(
            main_row_frame,
            text=f"{good.base_price:,} –¥–µ–Ω.",
            font=RomanTheme.FONT_PRICE,
            text_color=RomanTheme.ACCENT,
            anchor="center"
        )
        price_label.grid(row=0, column=2, padx=5, pady=8, sticky="ew")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
        buy_button = ctk.CTkButton(
            main_row_frame,
            text="üõí –ö—É–ø–∏—Ç—å",
            font=RomanTheme.FONT_BUTTON,
            fg_color=RomanTheme.BUTTON,
            hover_color=RomanTheme.BUTTON_HOVER,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=5,
            width=100,
            height=30,
            command=lambda g=good, container=row_container: self.toggle_purchase_form(g, container)
        )
        buy_button.grid(row=0, column=3, padx=5, pady=8)
        
        # –°–∫—Ä—ã—Ç–∞—è —Ñ–æ—Ä–º–∞ –ø–æ–∫—É–ø–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞)
        purchase_form = ctk.CTkFrame(
            row_container,
            fg_color=RomanTheme.ACCENT,
            corner_radius=8,
            height=80
        )
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        setattr(row_container, 'purchase_form', purchase_form)
        setattr(row_container, 'good', good)
        setattr(row_container, 'is_form_shown', False)
    
    def toggle_purchase_form(self, good: GoodsItem, row_container):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–∫—É–ø–∫–∏
        for widget in self.goods_rows_frame.winfo_children():
            if hasattr(widget, 'purchase_form') and hasattr(widget, 'is_form_shown'):
                if widget != row_container and widget.is_form_shown:
                    widget.purchase_form.pack_forget()
                    widget.is_form_shown = False
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É
        if not row_container.is_form_shown:
            self.show_purchase_form(good, row_container)
        else:
            self.hide_purchase_form(row_container)
    
    def show_purchase_form(self, good: GoodsItem, row_container):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        purchase_form = row_container.purchase_form
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for widget in purchase_form.winfo_children():
            widget.destroy()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–∫—É–ø–∫–∏
        purchase_form.pack(fill="x", pady=(5, 0))
        purchase_form.pack_propagate(False)
        
        # –°–æ–∑–¥–∞–µ–º grid layout –¥–ª—è —Ñ–æ—Ä–º—ã
        purchase_form.grid_columnconfigure(0, weight=1)
        purchase_form.grid_columnconfigure(1, weight=1)
        purchase_form.grid_columnconfigure(2, weight=1)
        purchase_form.grid_columnconfigure(3, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ
        info_label = ctk.CTkLabel(
            purchase_form,
            text=f"–ü–æ–∫—É–ø–∫–∞: {good.name} ({good.base_price:,} –¥–µ–Ω./–µ–¥.)",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.BACKGROUND
        )
        info_label.grid(row=0, column=0, columnspan=2, padx=10, pady=(10, 5), sticky="w")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_label = ctk.CTkLabel(
            purchase_form,
            text="–ö–æ–ª-–≤–æ:",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.BACKGROUND
        )
        quantity_label.grid(row=1, column=0, padx=(10, 5), pady=(0, 10), sticky="e")
        
        quantity_entry = ctk.CTkEntry(
            purchase_form,
            font=RomanTheme.FONT_SMALL,
            width=60,
            height=25,
            placeholder_text="1"
        )
        quantity_entry.grid(row=1, column=1, padx=(0, 10), pady=(0, 10), sticky="w")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_button = ctk.CTkButton(
            purchase_form,
            text="‚úì OK",
            font=RomanTheme.FONT_SMALL,
            fg_color=RomanTheme.SUCCESS,
            hover_color="#5a7c1f",
            text_color=RomanTheme.BACKGROUND,
            corner_radius=5,
            width=50,
            height=25,
            command=lambda: self.confirm_purchase_inline(good, quantity_entry, row_container)
        )
        confirm_button.grid(row=1, column=2, padx=5, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_button = ctk.CTkButton(
            purchase_form,
            text="‚úó",
            font=RomanTheme.FONT_SMALL,
            fg_color=RomanTheme.WARNING,
            hover_color="#b8762f",
            text_color=RomanTheme.BACKGROUND,
            corner_radius=5,
            width=30,
            height=25,
            command=lambda: self.hide_purchase_form(row_container)
        )
        cancel_button.grid(row=1, column=3, padx=(0, 10), pady=(0, 10))
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        quantity_entry.focus()
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
        row_container.is_form_shown = True
        self.selected_good = good
        self.quantity_entry = quantity_entry
    
    def hide_purchase_form(self, row_container):
        """–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ø–æ–∫—É–ø–∫–∏"""
        row_container.purchase_form.pack_forget()
        row_container.is_form_shown = False
        self.selected_good = None
        self.quantity_entry = None
    
    def confirm_purchase_inline(self, good: GoodsItem, quantity_entry: ctk.CTkEntry, row_container):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –∏–∑ inline —Ñ–æ—Ä–º—ã"""
        try:
            quantity_text = quantity_entry.get().strip()
            if not quantity_text:
                self.show_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
                return
            
            quantity = int(quantity_text)
            if quantity <= 0:
                self.show_error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
            
            total_price = good.base_price * quantity
            
            if total_price > self.game.player.balance:
                self.show_error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {total_price:,} –¥–µ–Ω–∞—Ä–∏–µ–≤\n–î–æ—Å—Ç—É–ø–Ω–æ: {self.game.player.balance:,} –¥–µ–Ω–∞—Ä–∏–µ–≤")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            self.game.player.add_goods(good, quantity)
            self.game.player.adjust_balance(-total_price)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.show_success(f"–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ!\n{quantity} –µ–¥. '{good.name}' –∑–∞ {total_price:,} –¥–µ–Ω–∞—Ä–∏–µ–≤")
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–∫—É–ø–∫–∏
            self.hide_purchase_form(row_container)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.refresh_screen()
            
        except ValueError:
            self.show_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    def create_inventory_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å–∫–ª–∞–¥–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å–∫–ª–∞–¥–∞
        inventory_title_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BUTTON,
            corner_radius=10,
            height=50
        )
        inventory_title_frame.pack(fill="x", pady=(20, 15), padx=20)
        inventory_title_frame.pack_propagate(False)
        
        inventory_title_label = ctk.CTkLabel(
            inventory_title_frame,
            text="üóÉÔ∏è –í–ê–® –°–ö–õ–ê–î üóÉÔ∏è",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        inventory_title_label.pack(expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–∫–ª–∞–¥–∞
        warehouse_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10
        )
        warehouse_frame.pack(fill="x", pady=(0, 20), padx=20)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ
        if not self.game.player.inventory or all(qty == 0 for qty in self.game.player.inventory.values()):
            empty_label = ctk.CTkLabel(
                warehouse_frame,
                text="üì¶ –°–∫–ª–∞–¥ –ø—É—Å—Ç\n\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.NEUTRAL,
                justify="center"
            )
            empty_label.pack(pady=40)
        else:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–∫–ª–∞–¥–∞
            warehouse_headers_frame = ctk.CTkFrame(
                warehouse_frame,
                fg_color=RomanTheme.NEUTRAL,
                corner_radius=8
            )
            warehouse_headers_frame.pack(fill="x", pady=15, padx=15)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞
            name_header = ctk.CTkLabel(
                warehouse_headers_frame,
                text="–¢–æ–≤–∞—Ä",
                font=RomanTheme.FONT_BUTTON,
                text_color=RomanTheme.BACKGROUND
            )
            name_header.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
            
            qty_header = ctk.CTkLabel(
                warehouse_headers_frame,
                text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                font=RomanTheme.FONT_BUTTON,
                text_color=RomanTheme.BACKGROUND
            )
            qty_header.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
            
            warehouse_headers_frame.grid_columnconfigure(0, weight=7)
            warehouse_headers_frame.grid_columnconfigure(1, weight=3)
            
            # –°—Ç—Ä–æ–∫–∏ —Å–æ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            for item_name, quantity in self.game.player.inventory.items():
                if quantity > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0
                    self.create_inventory_row(warehouse_frame, item_name, quantity)
    
    def create_inventory_row(self, parent, item_name: str, quantity: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–∫–ª–∞–¥–∞"""
        
        row_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.NEUTRAL,
            border_width=1,
            corner_radius=5
        )
        row_frame.pack(fill="x", pady=3, padx=15)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        name_label = ctk.CTkLabel(
            row_frame,
            text=item_name,
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT,
            anchor="w"
        )
        name_label.grid(row=0, column=0, padx=15, pady=8, sticky="ew")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity_label = ctk.CTkLabel(
            row_frame,
            text=f"{quantity:,} –µ–¥.",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.ACCENT,
            anchor="center"
        )
        quantity_label.grid(row=0, column=1, padx=15, pady=8, sticky="ew")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        row_frame.grid_columnconfigure(0, weight=7)
        row_frame.grid_columnconfigure(1, weight=3)
    
    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        
        bottom_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=80
        )
        bottom_frame.pack(side="bottom", fill="x", pady=10)
        bottom_frame.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_button = ctk.CTkButton(
            bottom_frame,
            text="‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            font=RomanTheme.FONT_BUTTON,
            fg_color=RomanTheme.BUTTON,
            hover_color=RomanTheme.BUTTON_HOVER,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=8,
            width=250,
            height=50,
            command=self.on_back
        )
        back_button.pack(expand=True)
    def show_error(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–∞–º–æ–º —ç–∫—Ä–∞–Ω–µ"""
        self.show_message(message, RomanTheme.ERROR, "‚ö†Ô∏è –û–®–ò–ë–ö–ê ‚ö†Ô∏è")
    
    def show_success(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤ —Å–∞–º–æ–º —ç–∫—Ä–∞–Ω–µ"""
        self.show_message(message, RomanTheme.SUCCESS, "‚úÖ –£–°–ü–ï–• ‚úÖ")
    
    def show_message(self, message: str, color: str, title: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_frame = ctk.CTkFrame(
            self,
            fg_color=color,
            corner_radius=10,
            height=100
        )
        message_frame.pack(fill="x", pady=(0, 10), padx=50)
        message_frame.pack_propagate(False)
        
        title_label = ctk.CTkLabel(
            message_frame,
            text=title,
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        title_label.pack(pady=(10, 5))
        
        message_label = ctk.CTkLabel(
            message_frame,
            text=message,
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.BACKGROUND,
            justify="center"
        )
        message_label.pack(pady=(0, 10))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        self.after(3000, lambda: message_frame.destroy())
    
    def refresh_screen(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        for widget in self.winfo_children():
            widget.destroy()
        self.create_widgets()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–≥—Ä—ã
    class MockGoodsItem:
        def __init__(self, name, base_price, category):
            self.name = name
            self.base_price = base_price
            self.category = category
    
    class MockPlayer:
        def __init__(self):
            self.balance = 5000
            self.inventory = {
                "–®–µ–ª–∫": 10,
                "–°–ø–µ—Ü–∏–∏": 5,
                "–í–∏–Ω–æ": 8,
                "–ó–æ–ª–æ—Ç–æ": 2
            }
        
        def add_goods(self, item, quantity):
            self.inventory[item.name] = self.inventory.get(item.name, 0) + quantity
        
        def adjust_balance(self, amount):
            self.balance += amount
    
    class MockGame:
        def __init__(self):
            self.player = MockPlayer()
            self.goods = [
                MockGoodsItem("–®–µ–ª–∫", 100, "–¢–∫–∞–Ω–∏"),
                MockGoodsItem("–°–ø–µ—Ü–∏–∏", 80, "–ü–∏—â–∞"),
                MockGoodsItem("–í–∏–Ω–æ", 60, "–ù–∞–ø–∏—Ç–∫–∏"),
                MockGoodsItem("–ó–æ–ª–æ—Ç–æ", 500, "–ú–µ—Ç–∞–ª–ª—ã"),
                MockGoodsItem("–ö–µ—Ä–∞–º–∏–∫–∞", 40, "–ò–∑–¥–µ–ª–∏—è"),
                MockGoodsItem("–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ", 70, "–ü–∏—â–∞")
            ]
    
    def test_back():
        print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
    ctk.set_appearance_mode("light")
    root = ctk.CTk()
    root.title("–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–∫–ª–∞–¥–∞")
    root.geometry("1200x800")
    root.configure(fg_color=RomanTheme.BACKGROUND)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∏–≥—Ä—É
    mock_game = MockGame()
      # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω
    screen = ShopInventoryScreen(
        parent=root,
        game=mock_game,  # type: ignore
        on_back=test_back
    )
    screen.pack(fill="both", expand=True)
    
    root.mainloop()
