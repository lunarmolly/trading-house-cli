"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º"
–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ –î—Ä–µ–≤–Ω–∏–π –†–∏–º
"""

import customtkinter as ctk
from typing import Callable, Optional
from core.game import Game


class RomanTheme:
    """–ê–Ω—Ç–∏—á–Ω–∞—è —Ä–∏–º—Å–∫–∞—è —Ç–µ–º–∞ –¥–ª—è GUI"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    BACKGROUND = "#f0e5d1"      # –§–æ–Ω (—Ü–≤–µ—Ç –ø–µ—Ä–≥–∞–º–µ–Ω—Ç–∞)
    ACCENT = "#6d6923"          # –ê–∫—Ü–µ–Ω—Ç—ã (–æ–ª–∏–≤–∫–æ–≤—ã–π)
    BUTTON = "#947153"          # –ö–Ω–æ–ø–∫–∏ –∏ –±–æ—Ä–¥—é—Ä—ã (–±—Ä–æ–Ω–∑–∞)
    TEXT = "#372e29"            # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—Ç–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
    NEUTRAL = "#acacac"         # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
    BUTTON_HOVER = "#a0815e"    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    FRAME_BORDER = "#8b6f47"    # –ë–æ—Ä–¥—é—Ä—ã —Ä–∞–º–æ–∫
    SUCCESS = "#6b8e23"         # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–æ–ª–∏–≤–∫–æ–≤–æ-–∑–µ–ª–µ–Ω—ã–π)
    WARNING = "#cd853f"         # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–µ—Å–æ—á–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
    
    # –®—Ä–∏—Ñ—Ç—ã
    FONT_FAMILY = "Georgia"
    FONT_TITLE = ("Georgia", 28, "bold")
    FONT_HEADER = ("Georgia", 20, "bold")
    FONT_TEXT = ("Georgia", 14)
    FONT_BUTTON = ("Georgia", 16, "bold")
    FONT_SMALL = ("Georgia", 12)
    FONT_INFO = ("Georgia", 16)


class MainMenuScreen(ctk.CTkFrame):
    """–≠–∫—Ä–∞–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞"""
    
    def __init__(self, parent, game: Game, callbacks: dict):
        super().__init__(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=0
        )
        self.game = game
        self.callbacks = callbacks
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        header_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=180
        )
        header_frame.pack(fill="x", pady=(20, 0))
        header_frame.pack_propagate(False)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="üèõÔ∏è –¢–û–†–ì–û–í–´–ô –î–û–ú üèõÔ∏è",
            font=RomanTheme.FONT_TITLE,
            text_color=RomanTheme.ACCENT
        )
        title_label.pack(pady=(20, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.create_info_panel(header_frame)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è)
        scrollable_frame = ctk.CTkScrollableFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            scrollbar_button_color=RomanTheme.BUTTON,
            scrollbar_button_hover_color=RomanTheme.BUTTON_HOVER
        )
        scrollable_frame.pack(fill="both", expand=True, padx=50, pady=(10, 10))
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ctk.CTkFrame(
            scrollable_frame,
            fg_color=RomanTheme.BACKGROUND
        )
        actions_frame.pack(fill="x", pady=20, padx=20)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        self.create_menu_buttons(actions_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–≥—Ä—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        bottom_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=80
        )
        bottom_frame.pack(side="bottom", fill="x", pady=10)
        bottom_frame.pack_propagate(False)
        
        # –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        self.create_status_panel(bottom_frame)
    
    def create_info_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞"""
        
        info_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10
        )
        info_frame.pack(pady=(10, 20), padx=100, fill="x")
        
        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        main_info_frame = ctk.CTkFrame(
            info_frame,
            fg_color=RomanTheme.BACKGROUND
        )
        main_info_frame.pack(fill="x", padx=15, pady=(15, 8))
        
        # –¶–∏–∫–ª
        cycle_label = ctk.CTkLabel(
            main_info_frame,
            text=f"‚è≥ –¶–∏–∫–ª: {self.game.current_cycle} / {self.game.max_cycles}",
            font=RomanTheme.FONT_INFO,
            text_color=RomanTheme.TEXT
        )
        cycle_label.pack(side="left", padx=(0, 30))
        
        # –ë–∞–ª–∞–Ω—Å
        balance_color = RomanTheme.SUCCESS if self.game.player.balance >= 5000 else RomanTheme.TEXT
        balance_label = ctk.CTkLabel(
            main_info_frame,
            text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {self.game.player.balance:,} –¥–µ–Ω–∞—Ä–∏–µ–≤",
            font=RomanTheme.FONT_INFO,
            text_color=balance_color
        )
        balance_label.pack(side="left", padx=(0, 30))
        
        # –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_text = {
            "easy": "üõ°Ô∏è –õ–µ–≥–∫–∏–π",
            "normal": "‚öîÔ∏è –°—Ä–µ–¥–Ω–∏–π", 
            "hard": "üî• –°–ª–æ–∂–Ω—ã–π"
        }.get(self.game.difficulty, self.game.difficulty.upper())
        
        difficulty_label = ctk.CTkLabel(
            main_info_frame,
            text=f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_text}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.NEUTRAL
        )
        difficulty_label.pack(side="right")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        additional_info_frame = ctk.CTkFrame(
            info_frame,
            fg_color=RomanTheme.BACKGROUND
        )
        additional_info_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã
        active_caravans = len(self.game.active_caravans)
        caravans_label = ctk.CTkLabel(
            additional_info_frame,
            text=f"üöõ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã: {active_caravans}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        caravans_label.pack(side="left", padx=(0, 30))
        
        # –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ
        inventory_count = len([item for item, qty in self.game.player.inventory.items() if qty > 0])
        inventory_label = ctk.CTkLabel(
            additional_info_frame,
            text=f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: {inventory_count} –≤–∏–¥–æ–≤",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        inventory_label.pack(side="left")
        
        # –¶–µ–ª—å –∏–≥—Ä—ã
        goal_progress = (self.game.player.balance / 10000) * 100
        goal_color = RomanTheme.SUCCESS if goal_progress >= 100 else RomanTheme.WARNING
        goal_label = ctk.CTkLabel(
            additional_info_frame,
            text=f"üéØ –¶–µ–ª—å: {goal_progress:.1f}% (10,000 –¥–µ–Ω–∞—Ä–∏–µ–≤)",
            font=RomanTheme.FONT_TEXT,
            text_color=goal_color
        )
        goal_label.pack(side="right")
    
    def create_menu_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            parent,
            text="‚öñÔ∏è –î–ï–ô–°–¢–í–ò–Ø –¢–û–†–ì–û–í–¶–ê ‚öñÔ∏è",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.ACCENT
        )
        section_label.pack(pady=(20, 30))
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        menu_buttons = [
            {
                "text": "üèõÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–æ–¥–∞",
                "description": "–ò–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏",
                "callback": "show_cities",
                "icon": "üèõÔ∏è"
            },
            {
                "text": "üöõ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã", 
                "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤",
                "callback": "show_caravans",
                "icon": "üöõ"
            },
            {
                "text": "üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω",
                "description": "–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä–∞–≤–∞–Ω –≤ –≥–æ—Ä–æ–¥",
                "callback": "send_caravan",
                "icon": "üì¶"
            },
            {
                "text": "üè™ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
                "description": "–ó–∞–∫—É–ø–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏",
                "callback": "buy_goods",
                "icon": "üè™"
            },
            # {
            #     "text": "üóÉÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥",
            #     "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–ø–∞—Å—ã –Ω–∞ —Å–∫–ª–∞–¥–µ",
            #     "callback": "show_inventory",
            #     "icon": "üóÉÔ∏è"
            # },
            {
                "text": "‚è≠Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É",
                "description": "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É",
                "callback": "next_cycle",
                "icon": "‚è≠Ô∏è",
                "style": "accent"
            }
        ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for i, button_config in enumerate(menu_buttons):
            self.create_action_button(parent, button_config, i)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(
            parent,
            height=2,
            fg_color=RomanTheme.FRAME_BORDER
        )
        separator.pack(fill="x", pady=30, padx=100)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        quit_button_config = {
            "text": "üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É",
            "description": "–í—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "callback": "quit_game",
            "icon": "üö™",
            "style": "warning"
        }
        self.create_action_button(parent, quit_button_config, len(menu_buttons), is_quit=True)
    
    def create_action_button(self, parent, config: dict, index: int, is_quit: bool = False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        if config.get("style") == "accent":
            button_color = RomanTheme.ACCENT
            button_hover = "#5a5a1e"
        elif config.get("style") == "warning" or is_quit:
            button_color = RomanTheme.WARNING
            button_hover = "#b8762f"
        else:
            button_color = RomanTheme.BUTTON
            button_hover = RomanTheme.BUTTON_HOVER
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        button_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=1,
            corner_radius=10
        )
        button_frame.pack(pady=8, padx=40, fill="x")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        action_button = ctk.CTkButton(
            button_frame,
            text=config["text"],
            font=RomanTheme.FONT_BUTTON,
            fg_color=button_color,
            hover_color=button_hover,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=8,
            width=400,
            height=50,
            command=lambda: self.handle_action(config["callback"])
        )
        action_button.pack(pady=(15, 8), padx=20)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        description_label = ctk.CTkLabel(
            button_frame,
            text=config["description"],
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.NEUTRAL,
            justify="center"
        )
        description_label.pack(pady=(0, 15))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å —Ñ—Ä–µ–π–º
        self.add_button_hover_effect(button_frame, action_button)
    
    def add_button_hover_effect(self, frame, button):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–µ–π–º –∫–Ω–æ–ø–∫–∏"""
        original_border_color = frame.cget("border_color")
        
        def on_enter(event):
            frame.configure(border_color=RomanTheme.ACCENT)
        
        def on_leave(event):
            frame.configure(border_color=original_border_color)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        frame.bind("<Enter>", on_enter)
        frame.bind("<Leave>", on_leave)
        button.bind("<Enter>", on_enter)
        button.bind("<Leave>", on_leave)
    
    def create_status_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if self.game.is_game_over():
            if self.game.has_won():
                status_text = "üèÜ –ü–û–ë–ï–î–ê! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!"
                status_color = RomanTheme.SUCCESS
            else:
                status_text = "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."
                status_color = RomanTheme.WARNING
        else:
            cycles_left = self.game.max_cycles - self.game.current_cycle
            if cycles_left <= 3:
                status_text = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Ü–∏–∫–ª–æ–≤: {cycles_left}"
                status_color = RomanTheme.WARNING
            else:
                status_text = f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Ü–∏–∫–ª–æ–≤: {cycles_left}"
                status_color = RomanTheme.TEXT
        
        status_label = ctk.CTkLabel(
            parent,
            text=status_text,
            font=RomanTheme.FONT_TEXT,
            text_color=status_color
        )
        status_label.pack(pady=(10, 5))
        
        # –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∑–∞
        motivation_texts = [
            "\"Fortuna audaces iuvat\" ‚Äî –§–æ—Ä—Ç—É–Ω–∞ –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç —Å–º–µ–ª—ã–º",
            "\"Per aspera ad astra\" ‚Äî –ß–µ—Ä–µ–∑ —Ç–µ—Ä–Ω–∏–∏ –∫ –∑–≤–µ–∑–¥–∞–º", 
            "\"Audentes fortuna juvat\" ‚Äî –°–º–µ–ª—ã–º –ø–æ–º–æ–≥–∞–µ—Ç —Å—É–¥—å–±–∞",
            "\"Veni, vidi, vici\" ‚Äî –ü—Ä–∏—à–µ–ª, —É–≤–∏–¥–µ–ª, –ø–æ–±–µ–¥–∏–ª"
        ]
        
        import random
        motivation_text = random.choice(motivation_texts)
        
        motivation_label = ctk.CTkLabel(
            parent,
            text=motivation_text,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.NEUTRAL,
            justify="center"
        )
        motivation_label.pack(pady=(0, 10))
    
    def handle_action(self, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if action in self.callbacks and self.callbacks[action]:
            self.callbacks[action]()
        else:
            print(f"–î–µ–π—Å—Ç–≤–∏–µ '{action}' –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    def refresh_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        for widget in self.winfo_children():
            widget.destroy()
        self.create_widgets()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–≥—Ä—ã
    class MockGame:
        def __init__(self):
            self.current_cycle = 5
            self.max_cycles = 20
            self.difficulty = "normal"
            self.active_caravans = []
            
            class MockPlayer:
                def __init__(self):
                    self.balance = 7500
                    self.inventory = {"–®–µ–ª–∫": 10, "–°–ø–µ—Ü–∏–∏": 5, "–í–∏–Ω–æ": 0}
            
            self.player = MockPlayer()
        
        def is_game_over(self):
            return False
        
        def has_won(self):
            return self.player.balance >= 10000
    
    def test_callback():
        print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
    ctk.set_appearance_mode("light")
    root = ctk.CTk()
    root.title("–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    root.geometry("1200x800")
    root.configure(fg_color=RomanTheme.BACKGROUND)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∏–≥—Ä—É
    mock_game = MockGame()
    
    # –°–æ–∑–¥–∞–µ–º callbacks
    callbacks = {
        "show_cities": test_callback,
        "show_caravans": test_callback,
        "send_caravan": test_callback,
        "buy_goods": test_callback,
        "show_inventory": test_callback,
        "next_cycle": test_callback,
        "quit_game": test_callback
    }
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω
    screen = MainMenuScreen(
        parent=root,
        game=mock_game,
        callbacks=callbacks
    )
    screen.pack(fill="both", expand=True)
    
    root.mainloop()