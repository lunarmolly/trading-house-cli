"""
–≠–∫—Ä–∞–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –¥–ª—è –∏–≥—Ä—ã "–¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º" - –î—Ä–µ–≤–Ω–∏–π –†–∏–º
"""

import customtkinter as ctk
from typing import Callable, Optional, Dict
from core.game import Game
from models.city import City
from models.goods_item import GoodsItem


class RomanTheme:
    """–†–∏–º—Å–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    BACKGROUND = "#f0e5d1"  # –°–≤–µ—Ç–ª–æ-–±–µ–∂–µ–≤—ã–π —Ñ–æ–Ω
    BUTTON = "#947153"      # –ö–æ—Ä–∏—á–Ω–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    BUTTON_HOVER = "#8b6946"  # –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    ACCENT = "#b8762f"      # –ó–æ–ª–æ—Ç–∏—Å—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
    TEXT = "#372e29"        # –¢–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ç–µ–∫—Å—Ç
    SUCCESS = "#6b8e23"     # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
    WARNING = "#cd853f"     # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    ERROR = "#8b4513"       # –ö—Ä–∞—Å–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
    NEUTRAL = "#8a7968"     # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    FRAME_BORDER = "#372e29"  # –ì—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–µ–π–º–æ–≤
    
    # –®—Ä–∏—Ñ—Ç—ã
    FONT_TITLE = ("Georgia", 32, "bold")
    FONT_HEADER = ("Georgia", 18, "bold")
    FONT_BUTTON = ("Georgia", 14, "bold")
    FONT_TEXT = ("Georgia", 12)
    FONT_SMALL = ("Georgia", 10)


class SendCaravanScreen(ctk.CTkFrame):
    """–≠–∫—Ä–∞–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤"""
    
    def __init__(self, parent, game: Game, on_back: Callable):
        super().__init__(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            corner_radius=0
        )
        self.game = game
        self.on_back = on_back
          # –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        self.selected_city: Optional[City] = None
        self.selected_goods: Dict[str, int] = {}
        self.current_capacity = 0
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.city_buttons = {}
        self.capacity_label: Optional[ctk.CTkLabel] = None
        self.send_button: Optional[ctk.CTkButton] = None
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=120
        )
        header_frame.pack(fill="x", pady=(20, 0))
        header_frame.pack_propagate(False)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üöõ –û–¢–ü–†–ê–í–ö–ê –ö–ê–†–ê–í–ê–ù–ê üöõ",
            font=RomanTheme.FONT_TITLE,
            text_color=RomanTheme.ACCENT
        )
        title_label.pack(pady=(20, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö
        info_label = ctk.CTkLabel(
            header_frame,
            text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {self.game.player.balance:,} –¥–µ–Ω–∞—Ä–∏–µ–≤ | üöõ –ö—É—Ä—å–µ—Ä—ã: {len(self.game.player.couriers)} | üõ†Ô∏è –ü–æ–≤–æ–∑–∫–∏: {len(self.game.player.wagons)}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        info_label.pack(pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        main_scrollable = ctk.CTkScrollableFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            scrollbar_button_color=RomanTheme.BUTTON,
            scrollbar_button_hover_color=RomanTheme.BUTTON_HOVER
        )
        main_scrollable.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
        if not self.can_send_caravan():
            self.create_no_caravan_message(main_scrollable)
            self.create_bottom_panel()
            return
        
        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        self.create_city_selection(main_scrollable)
        
        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        self.create_goods_selection(main_scrollable)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.create_capacity_info(main_scrollable)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.create_send_button(main_scrollable)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel()
    
    def can_send_caravan(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
        if not self.game.player.couriers:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–≤–æ–∑–æ–∫
        if not self.game.player.wagons:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
        if not any(qty > 0 for qty in self.game.player.inventory.values()):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–Ω–µ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω—è—Ç—ã –∫–∞—Ä–∞–≤–∞–Ω–∞–º–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ)
        available_cities = self.get_available_cities()
        if not available_cities:
            return False
        
        return True
    
    def get_available_cities(self) -> list[City]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä–∞–≤–∞–Ω"""
        # –ì–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞—Ä–∞–≤–∞–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
        occupied_cities = set()
        for caravan in self.game.active_caravans:
            if caravan.departure_cycle == self.game.current_cycle:
                occupied_cities.add(caravan.destination.name)
          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        return [city for city in self.game.cities if city.name not in occupied_cities]
    
    def get_caravan_info_for_city(self, city: City) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä–∞–≤–∞–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –≤ –¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥"""
        for caravan in self.game.active_caravans:
            if caravan.departure_cycle == self.game.current_cycle and caravan.destination.name == city.name:
                return f"–¶–∏–∫–ª {caravan.return_cycle}"
        return "–ó–∞–Ω—è—Ç"
    
    def create_no_caravan_message(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        message_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.WARNING,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10
        )
        message_frame.pack(fill="x", pady=50, padx=50)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        reasons = []
        if not self.game.player.couriers:
            reasons.append("üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤")
        if not self.game.player.wagons:
            reasons.append("üõ†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–≤–æ–∑–æ–∫")
        if not any(qty > 0 for qty in self.game.player.inventory.values()):
            reasons.append("üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ")
        
        available_cities = self.get_available_cities()
        if not available_cities:
            reasons.append("üèõÔ∏è –í—Å–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã –∫–∞—Ä–∞–≤–∞–Ω–∞–º–∏ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")
        
        warning_label = ctk.CTkLabel(
            message_frame,
            text="‚ö†Ô∏è –ù–ï–í–û–ó–ú–û–ñ–ù–û –û–¢–ü–†–ê–í–ò–¢–¨ –ö–ê–†–ê–í–ê–ù ‚ö†Ô∏è",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        warning_label.pack(pady=(20, 10))
        
        reasons_text = "\n".join(reasons)
        reasons_label = ctk.CTkLabel(
            message_frame,
            text=f"–ü—Ä–∏—á–∏–Ω—ã:\n\n{reasons_text}\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.BACKGROUND,
            justify="center"
        )
        reasons_label.pack(pady=(0, 20))
    
    def create_city_selection(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
        city_section_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.ACCENT,
            corner_radius=10,
            height=50
        )
        city_section_frame.pack(fill="x", pady=(20, 15), padx=20)
        city_section_frame.pack_propagate(False)
        
        city_title_label = ctk.CTkLabel(
            city_section_frame,
            text="üèõÔ∏è –í–´–ë–ï–†–ò–¢–ï –ì–û–†–û–î –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø üèõÔ∏è",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        city_title_label.pack(expand=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
        cities_container = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10        )
        cities_container.pack(fill="x", pady=(0, 20), padx=20)
        
        available_cities = self.get_available_cities()
        
        if not available_cities:
            no_cities_label = ctk.CTkLabel(
                cities_container,
                text="üö´ –í—Å–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω—è—Ç—ã –∫–∞—Ä–∞–≤–∞–Ω–∞–º–∏ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.NEUTRAL,
                justify="center"
            )
            no_cities_label.pack(pady=40)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        all_cities = self.game.cities
        for i, city in enumerate(all_cities):
            is_available = city in available_cities
            self.create_city_button(cities_container, city, i, is_available)
    
    def create_city_button(self, parent, city: City, index: int, is_available: bool = True):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ—Ä–µ–π–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        frame_color = RomanTheme.BACKGROUND if is_available else "#e8ddc7"
        border_color = RomanTheme.FRAME_BORDER if is_available else RomanTheme.NEUTRAL
        
        city_frame = ctk.CTkFrame(
            parent,
            fg_color=frame_color,
            border_color=border_color,
            border_width=1,
            corner_radius=8
        )
        city_frame.pack(fill="x", pady=5, padx=15)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ
        city_info_frame = ctk.CTkFrame(
            city_frame,
            fg_color=frame_color
        )
        city_info_frame.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        city_prefix = "üèõÔ∏è" if is_available else "üö´"
        city_suffix = "" if is_available else " (–ó–ê–ù–Ø–¢)"
        city_name_label = ctk.CTkLabel(
            city_info_frame,
            text=f"{city_prefix} {city.name}{city_suffix}",
            font=RomanTheme.FONT_BUTTON,
            text_color=RomanTheme.TEXT if is_available else RomanTheme.NEUTRAL,
            anchor="w"
        )
        city_name_label.pack(anchor="w")
        distance_label = ctk.CTkLabel(
            city_info_frame,
            text=f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {city.duration} –¥–Ω–µ–π",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.NEUTRAL,
            anchor="w"
        )
        distance_label.pack(anchor="w")
        
        event_text = f"üé≠ –°–æ–±—ã—Ç–∏–µ: {city.current_event or '–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è'}"
        event_label = ctk.CTkLabel(
            city_info_frame,
            text=event_text,
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.NEUTRAL,
            anchor="w"
        )
        event_label.pack(anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        if is_available:
            select_button = ctk.CTkButton(
                city_frame,
                text="‚ö° –í—ã–±—Ä–∞—Ç—å",
                font=RomanTheme.FONT_BUTTON,
                fg_color=RomanTheme.BUTTON,
                hover_color=RomanTheme.BUTTON_HOVER,
                text_color=RomanTheme.BACKGROUND,
                corner_radius=8,
                width=120,
                height=40,
                command=lambda c=city: self.select_city(c)
            )
            select_button.pack(side="right", padx=10, pady=10)
            
            self.city_buttons[city.name] = (city_frame, select_button)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä–∞–≤–∞–Ω–µ
            occupied_info = self.get_caravan_info_for_city(city)
            disabled_button = ctk.CTkButton(
                city_frame,
                text=f"üöõ {occupied_info}",
                font=RomanTheme.FONT_SMALL,
                fg_color=RomanTheme.NEUTRAL,
                text_color=RomanTheme.BACKGROUND,
                corner_radius=8,
                width=140,
                height=40,
                state="disabled"
            )
            disabled_button.pack(side="right", padx=10, pady=10)
    
    def select_city(self, city: City):
        """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        self.selected_city = city
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for city_name, (frame, button) in self.city_buttons.items():
            if city_name == city.name:
                frame.configure(border_color=RomanTheme.ACCENT, border_width=3)
                button.configure(text="‚úÖ –í—ã–±—Ä–∞–Ω", fg_color=RomanTheme.SUCCESS)
            else:
                frame.configure(border_color=RomanTheme.FRAME_BORDER, border_width=1)
                button.configure(text="‚ö° –í—ã–±—Ä–∞—Ç—å", fg_color=RomanTheme.BUTTON)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤
        self.update_goods_section()
    
    def create_goods_selection(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.goods_section_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BUTTON,
            corner_radius=10,
            height=50
        )
        self.goods_section_frame.pack(fill="x", pady=(20, 15), padx=20)
        self.goods_section_frame.pack_propagate(False)
        goods_title_label = ctk.CTkLabel(
            self.goods_section_frame,
            text="üì¶ –í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–†–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò üì¶",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        goods_title_label.pack(expand=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        self.goods_container = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND,
            border_color=RomanTheme.FRAME_BORDER,
            border_width=2,
            corner_radius=10
        )
        self.goods_container.pack(fill="x", pady=(0, 20), padx=20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        self.goods_rows_frame = ctk.CTkFrame(
            self.goods_container,
            fg_color=RomanTheme.BACKGROUND
        )
        self.goods_rows_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        if not self.selected_city:
            placeholder_label = ctk.CTkLabel(
                self.goods_container,
                text="üëÜ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.NEUTRAL
            )
            placeholder_label.pack(pady=40)
    
    def update_goods_section(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        for widget in self.goods_container.winfo_children():
            widget.destroy()
        
        if not self.selected_city:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers_frame = ctk.CTkFrame(
            self.goods_container,
            fg_color=RomanTheme.NEUTRAL,
            corner_radius=8,
            height=40
        )
        headers_frame.pack(fill="x", pady=15, padx=15)
        headers_frame.pack_propagate(False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers_frame.grid_columnconfigure(0, weight=3)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        headers_frame.grid_columnconfigure(1, weight=2)  # –ù–∞ —Å–∫–ª–∞–¥–µ
        headers_frame.grid_columnconfigure(2, weight=2)  # –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞
        headers_frame.grid_columnconfigure(3, weight=2)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        headers_frame.grid_columnconfigure(4, weight=1)  # –î–µ–π—Å—Ç–≤–∏–µ
        
        headers = ["–¢–æ–≤–∞—Ä", "–ù–∞ —Å–∫–ª–∞–¥–µ", "–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ""]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(
                headers_frame,
                text=header,
                font=RomanTheme.FONT_BUTTON,
                text_color=RomanTheme.BACKGROUND
            )
            label.grid(row=0, column=i, padx=10, pady=8, sticky="ew")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        goods_dict = {g.name: g for g in self.game.goods}
        available_goods = [(name, qty) for name, qty in self.game.player.inventory.items() if qty > 0]
        
        if not available_goods:
            no_goods_label = ctk.CTkLabel(
                self.goods_container,
                text="üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.NEUTRAL,
                justify="center"
            )            
            no_goods_label.pack(pady=40)
            return
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        self.goods_rows_frame = ctk.CTkFrame(
            self.goods_container,
            fg_color=RomanTheme.BACKGROUND
        )
        self.goods_rows_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        for i, (name, available_qty) in enumerate(available_goods):
            good_obj = goods_dict.get(name)
            if good_obj:
                self.create_goods_row(self.goods_rows_frame, good_obj, available_qty, i)
    
    def create_goods_row(self, parent, good: GoodsItem, available_qty: int, row_index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–æ–º —Å inline —Ñ–æ—Ä–º–æ–π –≤—ã–±–æ—Ä–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–æ–∫–∏
        row_container = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND
        )
        row_container.pack(fill="x", pady=2)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
        main_row_frame = ctk.CTkFrame(
            row_container,
            fg_color=RomanTheme.BACKGROUND if row_index % 2 == 0 else "#ebe0d3",
            border_color=RomanTheme.NEUTRAL,
            border_width=1,
            corner_radius=5,
            height=45
        )
        main_row_frame.pack(fill="x", side="top")
        main_row_frame.pack_propagate(False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
        main_row_frame.grid_columnconfigure(0, weight=3)
        main_row_frame.grid_columnconfigure(1, weight=2)
        main_row_frame.grid_columnconfigure(2, weight=2)
        main_row_frame.grid_columnconfigure(3, weight=2)
        main_row_frame.grid_columnconfigure(4, weight=1)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        name_label = ctk.CTkLabel(
            main_row_frame,
            text=f"üì¶ {good.name}",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT,
            anchor="w"
        )
        name_label.grid(row=0, column=0, padx=10, pady=8, sticky="ew")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
        stock_label = ctk.CTkLabel(
            main_row_frame,
            text=f"{available_qty} –µ–¥.",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.TEXT
        )
        stock_label.grid(row=0, column=1, padx=10, pady=8, sticky="ew")
        
        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Ü–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
        expected_price = self.calculate_expected_price(good, self.selected_city) if self.selected_city else good.base_price
        price_label = ctk.CTkLabel(
            main_row_frame,
            text=f"{expected_price:,} –¥–µ–Ω./–µ–¥.",
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.SUCCESS if expected_price > good.base_price else RomanTheme.TEXT
        )
        price_label.grid(row=0, column=2, padx=10, pady=8, sticky="ew")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        selected_qty = self.selected_goods.get(good.name, 0)
        quantity_text = f"{selected_qty} –µ–¥." if selected_qty > 0 else "-"
        quantity_label = ctk.CTkLabel(
            main_row_frame,
            text=quantity_text,
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.ACCENT if selected_qty > 0 else RomanTheme.NEUTRAL
        )
        quantity_label.grid(row=0, column=3, padx=10, pady=8, sticky="ew")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
        button_text = "‚úì –í—ã–±—Ä–∞–Ω–æ" if selected_qty > 0 else "‚ö° –í—ã–±—Ä–∞—Ç—å"
        button_color = RomanTheme.SUCCESS if selected_qty > 0 else RomanTheme.BUTTON
        select_button = ctk.CTkButton(
            main_row_frame,
            text=button_text,
            font=RomanTheme.FONT_BUTTON,
            fg_color=button_color,
            hover_color=RomanTheme.BUTTON_HOVER,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=5,
            width=100,
            height=30,
            command=lambda g=good, container=row_container: self.toggle_selection_form(g, container, available_qty)
        )
        select_button.grid(row=0, column=4, padx=5, pady=8)
        
        # –°–∫—Ä—ã—Ç–∞—è —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞)
        selection_form = ctk.CTkFrame(
            row_container,
            fg_color=RomanTheme.ACCENT,
            corner_radius=8,
            height=80
        )
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        setattr(row_container, 'selection_form', selection_form)
        setattr(row_container, 'good', good)
        setattr(row_container, 'available_qty', available_qty)
        setattr(row_container, 'is_form_shown', False)
        setattr(row_container, 'quantity_label', quantity_label)
        setattr(row_container, 'select_button', select_button)
    
    def calculate_expected_price(self, good: GoodsItem, city: City) -> int:
        """–†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ"""
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞
        city_mod = city.demand_modifiers.get(good.name, 1.0) - 1.0
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
        event = city.current_event or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è"
        event_mod = self.game.config["event_modifiers"].get(event, {}).get(good.name, 1.0) - 1.0
          # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        distance_mod = city.duration * 0.02
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        total_percent = city_mod + event_mod + distance_mod
        final_modifier = 1.0 + total_percent
        
        return int(good.base_price * final_modifier)
    
    def create_capacity_info(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        self.capacity_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.NEUTRAL,
            corner_radius=10
        )
        self.capacity_frame.pack(fill="x", pady=(10, 20), padx=20)
        
        self.update_capacity_info()
    
    def update_capacity_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        for widget in self.capacity_frame.winfo_children():
            widget.destroy()
        
        if not self.game.player.wagons:
            return
        
        wagon = self.game.player.wagons[0]
        current_load = sum(self.selected_goods.values())
        
        capacity_text = f"üõ†Ô∏è –ü–æ–≤–æ–∑–∫–∞: {wagon.name} | –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {current_load}/{wagon.capacity} –µ–¥."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        if current_load == 0:
            color = RomanTheme.NEUTRAL
        elif current_load <= wagon.capacity * 0.7:
            color = RomanTheme.SUCCESS
        elif current_load <= wagon.capacity:
            color = RomanTheme.WARNING
        else:
            color = RomanTheme.ERROR
        
        self.capacity_label = ctk.CTkLabel(
            self.capacity_frame,
            text=capacity_text,
            font=RomanTheme.FONT_HEADER,
            text_color=color
        )
        self.capacity_label.pack(pady=15)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        if self.selected_goods:
            goods_text = " | ".join([f"{name}: {qty} –µ–¥." for name, qty in self.selected_goods.items()])
            selected_label = ctk.CTkLabel(
                self.capacity_frame,
                text=f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {goods_text}",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.BACKGROUND
            )
            selected_label.pack(pady=(0, 15))
    
    def create_send_button(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        self.send_button_frame = ctk.CTkFrame(
            parent,
            fg_color=RomanTheme.BACKGROUND
        )
        self.send_button_frame.pack(fill="x", pady=20, padx=20)
        
        self.update_send_button()
    def update_send_button(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        for widget in self.send_button_frame.winfo_children():
            widget.destroy()
        
        can_send = (
            self.selected_city is not None and 
            bool(self.selected_goods) and 
            sum(self.selected_goods.values()) <= self.game.player.wagons[0].capacity
        )
        
        if can_send:
            city_name = self.selected_city.name.upper() if self.selected_city else "–í–´–ë–ï–†–ò–¢–ï –ì–û–†–û–î"
            self.send_button = ctk.CTkButton(
                self.send_button_frame,
                text=f"üöÄ –û–¢–ü–†–ê–í–ò–¢–¨ –ö–ê–†–ê–í–ê–ù –í {city_name}",
                font=RomanTheme.FONT_BUTTON,
                fg_color=RomanTheme.SUCCESS,
                hover_color="#5a7c1f",
                text_color=RomanTheme.BACKGROUND,
                corner_radius=10,
                width=400,
                height=60,
                command=self.send_caravan
            )
            self.send_button.pack(pady=20)
        else:
            placeholder_label = ctk.CTkLabel(
                self.send_button_frame,
                text="üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞",
                font=RomanTheme.FONT_TEXT,
                text_color=RomanTheme.NEUTRAL
            )
            placeholder_label.pack(pady=20)
    
    def send_caravan(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        if not self.selected_city or not self.selected_goods:
            self.show_error("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ç–æ–≤–∞—Ä—ã")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞ –∏ –ø–æ–≤–æ–∑–∫—É
            courier = self.game.player.couriers[0]
            wagon = self.game.player.wagons[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            total_goods = sum(self.selected_goods.values())
            if total_goods > wagon.capacity:
                self.show_error("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–≤–æ–∑–∫–∏")
                return
            
            # –£–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞
            goods_dict = {g.name: g for g in self.game.goods}
            for name, qty in self.selected_goods.items():
                good_obj = goods_dict[name]
                self.game.player.remove_goods(good_obj, qty)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä–∞–≤–∞–Ω
            caravan = self.game.form_caravan(
                courier=courier,
                wagon=wagon,
                goods_selection=self.selected_goods.copy(),
                city=self.selected_city
            )
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            goods_list = ", ".join([f"{name} ({qty} –µ–¥.)" for name, qty in self.selected_goods.items()])
            success_message = f"‚úÖ –ö–∞—Ä–∞–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {self.selected_city.name}\n–¢–æ–≤–∞—Ä—ã: {goods_list}\n–ü—Ä–∏–±—ã—Ç–∏–µ: —Ü–∏–∫–ª {caravan.arrival_cycle}\n–í–æ–∑–≤—Ä–∞—Ç: —Ü–∏–∫–ª {caravan.return_cycle}"
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            self.selected_city = None
            self.selected_goods = {}
            self.current_capacity = 0
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.show_success_message(success_message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞
            self.refresh_screen()
            
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä–∞–≤–∞–Ω–∞: {str(e)}")
    
    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        bottom_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.BACKGROUND,
            height=80
        )
        bottom_frame.pack(side="bottom", fill="x", pady=10)
        bottom_frame.pack_propagate(False)
        
        back_button = ctk.CTkButton(
            bottom_frame,
            text="‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            font=RomanTheme.FONT_BUTTON,
            fg_color=RomanTheme.BUTTON,
            hover_color=RomanTheme.BUTTON_HOVER,
            text_color=RomanTheme.BACKGROUND,
            corner_radius=8,
            width=250,
            height=50,
            command=self.on_back
        )
        back_button.pack(expand=True)
    
    def show_error(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.show_message(message, RomanTheme.ERROR, "‚ö†Ô∏è –û–®–ò–ë–ö–ê")
    
    def show_success(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        self.show_message(message, RomanTheme.SUCCESS, "‚úÖ –£–°–ü–ï–•")
    
    def show_message(self, message: str, color: str, title: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_frame = ctk.CTkFrame(
            self,
            fg_color=color,
            corner_radius=10,
            height=100
        )
        message_frame.pack(fill="x", pady=(0, 10), padx=50)
        message_frame.pack_propagate(False)
        
        title_label = ctk.CTkLabel(
            message_frame,
            text=title,
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        title_label.pack(pady=(10, 5))
        
        message_label = ctk.CTkLabel(
            message_frame,
            text=message,
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.BACKGROUND,
            justify="center"
        )
        message_label.pack(pady=(0, 10))
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        self.after(3000, lambda: message_frame.destroy())
    def show_success_message(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        message_frame = ctk.CTkFrame(
            self,
            fg_color=RomanTheme.SUCCESS,
            corner_radius=10,
            height=250  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞
        )
        message_frame.pack(fill="x", pady=(0, 10), padx=50)
        message_frame.pack_propagate(False)
        
        title_label = ctk.CTkLabel(
            message_frame,
            text="üöÄ –ö–ê–†–ê–í–ê–ù –û–¢–ü–†–ê–í–õ–ï–ù",
            font=RomanTheme.FONT_HEADER,
            text_color=RomanTheme.BACKGROUND
        )
        title_label.pack(pady=(15, 10))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        scrollable_frame = ctk.CTkScrollableFrame(
            message_frame,
            fg_color=RomanTheme.SUCCESS,
            corner_radius=5,
            width=600,
            height=160  # –í—ã—Å–æ—Ç–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        )
        scrollable_frame.pack(fill="both", expand=True, pady=(0, 15), padx=20)
        
        message_label = ctk.CTkLabel(
            scrollable_frame,
            text=message,
            font=RomanTheme.FONT_TEXT,
            text_color=RomanTheme.BACKGROUND,
            justify="left",  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ª–µ–≤–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            wraplength=550  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫
        )
        message_label.pack(pady=10, padx=10, anchor="w")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è)
        self.after(8000, lambda: message_frame.destroy())
    
    def toggle_selection_form(self, good: GoodsItem, row_container, available_qty: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞
        for widget in self.goods_rows_frame.winfo_children():
            if hasattr(widget, 'selection_form') and hasattr(widget, 'is_form_shown'):
                if widget != row_container and widget.is_form_shown:
                    widget.selection_form.pack_forget()
                    widget.is_form_shown = False
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É
        if not row_container.is_form_shown:
            self.show_selection_form(good, row_container, available_qty)
        else:
            self.hide_selection_form(row_container)
    
    def show_selection_form(self, good: GoodsItem, row_container, available_qty: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        selection_form = row_container.selection_form
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for widget in selection_form.winfo_children():
            widget.destroy()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞
        selection_form.pack(fill="x", pady=(5, 0))
        selection_form.pack_propagate(False)
        
        # –°–æ–∑–¥–∞–µ–º grid layout –¥–ª—è —Ñ–æ—Ä–º—ã
        selection_form.grid_columnconfigure(0, weight=1)
        selection_form.grid_columnconfigure(1, weight=1)
        selection_form.grid_columnconfigure(2, weight=1)
        selection_form.grid_columnconfigure(3, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ
        info_label = ctk.CTkLabel(
            selection_form,
            text=f"–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞: {good.name} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_qty} –µ–¥.)",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.BACKGROUND
        )
        info_label.grid(row=0, column=0, columnspan=3, padx=10, pady=(10, 5), sticky="w")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_label = ctk.CTkLabel(
            selection_form,
            text="–ö–æ–ª-–≤–æ:",
            font=RomanTheme.FONT_SMALL,
            text_color=RomanTheme.BACKGROUND
        )
        quantity_label.grid(row=1, column=0, padx=(10, 5), pady=(0, 10), sticky="e")
        
        current_qty = self.selected_goods.get(good.name, 0)
        quantity_entry = ctk.CTkEntry(
            selection_form,
            font=RomanTheme.FONT_SMALL,
            width=80,
            height=25,
            placeholder_text="0"
        )
        quantity_entry.grid(row=1, column=1, padx=(0, 10), pady=(0, 10), sticky="w")
        
        if current_qty > 0:
            quantity_entry.delete(0, "end")
            quantity_entry.insert(0, str(current_qty))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_button = ctk.CTkButton(
            selection_form,
            text="‚úì OK",
            font=RomanTheme.FONT_SMALL,
            fg_color=RomanTheme.SUCCESS,
            hover_color="#5a7c1f",
            text_color=RomanTheme.BACKGROUND,
            corner_radius=5,
            width=50,
            height=25,
            command=lambda: self.confirm_selection_inline(good, quantity_entry, row_container, available_qty)
        )
        confirm_button.grid(row=1, column=2, padx=5, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_button = ctk.CTkButton(
            selection_form,
            text="‚úó",
            font=RomanTheme.FONT_SMALL,
            fg_color=RomanTheme.WARNING,
            hover_color="#b8762f",
            text_color=RomanTheme.BACKGROUND,
            corner_radius=5,
            width=30,
            height=25,
            command=lambda: self.hide_selection_form(row_container)
        )
        cancel_button.grid(row=1, column=3, padx=(0, 10), pady=(0, 10))
        
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
        row_container.is_form_shown = True
    
    def hide_selection_form(self, row_container):
        """–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        row_container.selection_form.pack_forget()
        row_container.is_form_shown = False
    
    def confirm_selection_inline(self, good: GoodsItem, quantity_entry: ctk.CTkEntry, row_container, available_qty: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ inline"""
        try:
            quantity = int(quantity_entry.get() or "0")
            
            if quantity < 0:
                self.show_error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                return
            
            if quantity > available_qty:
                self.show_error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_qty})")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–≤–æ–∑–∫–∏
            wagon = self.game.player.wagons[0]
            current_load = sum(self.selected_goods.values())
            new_load = current_load - self.selected_goods.get(good.name, 0) + quantity
            
            if new_load > wagon.capacity:
                self.show_error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–≤–æ–∑–∫–∏!\n–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {wagon.capacity}, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å: {new_load}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            if quantity > 0:
                self.selected_goods[good.name] = quantity
            else:
                self.selected_goods.pop(good.name, None)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            selected_qty = self.selected_goods.get(good.name, 0)
            quantity_text = f"{selected_qty} –µ–¥." if selected_qty > 0 else "-"
            row_container.quantity_label.configure(
                text=quantity_text,
                text_color=RomanTheme.ACCENT if selected_qty > 0 else RomanTheme.NEUTRAL
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
            button_text = "‚úì –í—ã–±—Ä–∞–Ω–æ" if selected_qty > 0 else "‚ö° –í—ã–±—Ä–∞—Ç—å"
            button_color = RomanTheme.SUCCESS if selected_qty > 0 else RomanTheme.BUTTON
            row_container.select_button.configure(
                text=button_text,
                fg_color=button_color
            )
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            self.hide_selection_form(row_container)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.update_capacity_info()
              # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.update_send_button()
            
            if quantity > 0:
                self.show_success(f"–í—ã–±—Ä–∞–Ω–æ: {quantity} –µ–¥. '{good.name}'")
            else:
                self.show_success(f"–¢–æ–≤–∞—Ä '{good.name}' —É–¥–∞–ª–µ–Ω –∏–∑ –≤—ã–±–æ—Ä–∞")
            
        except ValueError:
            self.show_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def refresh_screen(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–∞"""
        # –°–Ω–∞—á–∞–ª–∞ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.winfo_children():
            widget.destroy()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
if __name__ == "__main__":
    import sys
    import os
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    
    from core.world import load_balance_config, generate_world
    from core.goods import load_goods
    from models.player import Player
    from models.courier import Courier
    from models.wagon import Wagon
    
    class MockGame:
        def __init__(self):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = load_balance_config()
            cities = generate_world(config)
            goods = load_goods(config)
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
            courier = Courier(name="–ú–∞—Ä–∫—É—Å", endurance=0, illness_resistance=0.9)
            wagon = Wagon(name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–≤–æ–∑–∫–∞", capacity=200, durability=0.9)
            
            player = Player(balance=5000)
            player.couriers = [courier]
            player.wagons = [wagon]
            player.inventory = {
                "–®–µ–ª–∫": 15,
                "–°–ø–µ—Ü–∏–∏": 10,
                "–í–∏–Ω–æ": 8,
                "–ó–µ—Ä–Ω–æ": 20,
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": 5
            }
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä—É
            self.player = player
            self.cities = cities
            self.goods = goods
            self.config = config
            self.difficulty = "normal"
            self.current_cycle = 1
            self.max_cycles = 20
            self.active_caravans = []
        
        def form_caravan(self, courier, wagon, goods_selection, city):
            from models.caravan import Caravan
            caravan = Caravan(
                courier=courier,
                wagon=wagon,
                goods=goods_selection,
                destination=city,
                days_to_travel=city.duration,
                departure_cycle=self.current_cycle,                arrival_cycle=self.current_cycle + city.duration,
                return_cycle=self.current_cycle + city.duration * 2 + 1
            )
            self.active_caravans.append(caravan)
            return caravan
    
    def test_back():
        print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    ctk.set_appearance_mode("light")
    root = ctk.CTk()
    root.title("–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤")
    root.geometry("1200x800")
    root.configure(fg_color=RomanTheme.BACKGROUND)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∏–≥—Ä—É
    mock_game = MockGame()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω
    screen = SendCaravanScreen(
        parent=root,
        game=mock_game,  # type: ignore
        on_back=test_back
    )
    screen.pack(fill="both", expand=True)
    
    root.mainloop()
