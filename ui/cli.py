def select_difficulty() -> str:
    """CLI –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    print("\n=== –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ===")
    print("1. –õ–µ–≥–∫–∏–π (–º–µ–Ω—å—à–µ —Ä–∏—Å–∫–æ–≤, –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)")
    print("2. –°—Ä–µ–¥–Ω–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å)")
    print("3. –°–ª–æ–∂–Ω—ã–π (–≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏, –º–µ–Ω—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)")

    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (1-3): ").strip()
        if choice == "1":
            return "easy"
        elif choice == "2":
            return "normal"
        elif choice == "3":
            return "hard"
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def show_main_menu(game) -> None:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ü–∏–∫–ª–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.
    """
    while not game.is_game_over():
        print("\n=== –¢–æ—Ä–≥–æ–≤—ã–π –î–æ–º ===")
        print(f"–¶–∏–∫–ª: {game.current_cycle} / {game.max_cycles}")
        print(f"–ë–∞–ª–∞–Ω—Å: {game.player.balance} –¥–µ–Ω–∞—Ä–∏–µ–≤")
        print("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–æ–¥–∞")
        print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã")
        print("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω")
        print("4. –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        print("5. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥")
        print("6. –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É")
        print("7. –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            show_cities(game)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        elif choice == "2":
            show_caravans(game)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        elif choice == "3":
            send_caravan(game)
        elif choice == "4":
            buy_goods(game)
        elif choice == "5":
            show_inventory(game)
        elif choice == "6":
            game.next_cycle()
            game.update_caravans()
            show_active_caravans_status(game)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        elif choice == "7":
            print("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ===
    if game.has_won():
        print("\nüèÜ –ü–û–ë–ï–î–ê! üèÜ")
        print(f"–í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ {game.player.balance} –¥–µ–Ω–∞—Ä–∏–µ–≤ –∑–∞ {game.current_cycle} —Ü–∏–∫–ª–æ–≤!")
        print("–í—ã —Å—Ç–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ä–æ—Å–∫–æ—à–Ω–æ–π –≤–∏–ª–ª—ã —É –º–æ—Ä—è.")
    else:
        print("\nüíÄ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê üíÄ")
        print(f"–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {game.player.balance} –¥–µ–Ω–∞—Ä–∏–µ–≤.")
        print("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.")


def show_cities(game) -> None:
    print("\n--- –ì–æ—Ä–æ–¥–∞ ---")
    for city in game.cities:
        if city.duration == 0:
            print(f"{city.name}: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–†–∏–º)")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
            print(f"{city.name}: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ {city.duration} –¥–Ω–µ–π (—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ)")


def show_caravans(game) -> None:
    print("\n--- –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã ---")
    if not game.active_caravans:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤.")
        return
    for i, caravan in enumerate(game.active_caravans, 1):
        status = f"{caravan.destination.name}"
        if caravan.destination.duration == 0:
            status += " (–†–∏–º) - –≤–æ–∑–≤—Ä–∞—Ç –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ"
        else:
            status += f" | –ü—Ä–∏–±—ã—Ç–∏–µ: —Ü–∏–∫–ª {caravan.arrival_cycle}, –í–æ–∑–≤—Ä–∞—Ç: {caravan.return_cycle}"
        print(f"{i}. {status}")


def show_inventory(game) -> None:
    print("\n--- –°–∫–ª–∞–¥ ---")
    if not game.player.inventory:
        print("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return
    for name, qty in game.player.inventory.items():
        print(f"{name}: {qty} –µ–¥.")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")


def buy_goods(game) -> None:
    print("\n--- –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ---")
    print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {game.player.balance} –¥–µ–Ω–∞—Ä–∏–µ–≤")

    goods_list = game.goods
    goods_dict = {i + 1: g for i, g in enumerate(goods_list)}

    for idx, good in goods_dict.items():
        print(f"{idx}. {good.name} ({good.category}) ‚Äî {good.base_price} –¥–µ–Ω–∞—Ä–∏–µ–≤ –∑–∞ –µ–¥.")

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (–Ω–æ–º–µ—Ä) –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
    if not choice.isdigit() or int(choice) not in goods_dict and int(choice) != 0:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        return buy_goods(game)
    if int(choice) == 0:
        print("–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return

    selected_good = goods_dict[int(choice)]

    qty_input = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ '{selected_good.name}': ").strip()
    if not qty_input.isdigit() or int(qty_input) <= 0:
        print("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        return buy_goods(game)

    quantity = int(qty_input)
    total_price = selected_good.base_price * quantity

    if total_price > game.player.balance:
        print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {total_price}, –¥–æ—Å—Ç—É–ø–Ω–æ {game.player.balance}.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        return buy_goods(game)

    confirm = input(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É {quantity} –µ–¥. '{selected_good.name}' –∑–∞ {total_price} –¥–µ–Ω–∞—Ä–∏–µ–≤? (–î–ê/–Ω–µ—Ç): ").strip().lower()
    if confirm not in ["", "–¥–∞"]:
        print("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return

    game.player.add_goods(selected_good, quantity)
    game.player.adjust_balance(-total_price)
    print(f"–í—ã –∫—É–ø–∏–ª–∏ {quantity} –µ–¥. '{selected_good.name}' –∑–∞ {total_price} –¥–µ–Ω–∞—Ä–∏–µ–≤.")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")


def send_caravan(game) -> None:
    print("\n--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä–∞–≤–∞–Ω–∞ ---")
    if not game.player.inventory:
        print("–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    for i, city in enumerate(game.cities, 1):
        if city.duration == 0:
            print(f"{i}. {city.name} (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)")
        else:
            print(f"{i}. {city.name} (—ç–∫—Å–ø–µ–¥–∏—Ü–∏—è: {city.duration} –¥–Ω–µ–π)")

    city_index = input("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–æ–º–µ—Ä): ").strip()
    if not city_index.isdigit() or not (1 <= int(city_index) <= len(game.cities)):
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        return send_caravan(game)
    city = game.cities[int(city_index) - 1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –ø–æ–≤–æ–∑–æ–∫
    couriers = game.player.couriers
    if not couriers:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return
    courier = couriers[0]

    wagons = game.player.wagons
    if not wagons:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–≤–æ–∑–æ–∫.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return
    wagon = wagons[0]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
    goods_dict = {g.name: g for g in game.goods}
    available_goods = [(name, qty) for name, qty in game.player.inventory.items() if qty > 0]

    if not available_goods:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return

    # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω
    print("\n--- –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ ---")
    for idx, (name, qty) in enumerate(available_goods, 1):
        good_obj = goods_dict[name]

        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –†–∏–º–∞
        if city.duration == 0:  # –†–∏–º
            expected_price = int(good_obj.base_price * 0.9)
            print(f"{idx}. {name} ‚Äî {qty} –µ–¥. ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {expected_price} (90% –æ—Ç –±–∞–∑–æ–≤–æ–π)")
        else:
            city_mod = city.demand_modifiers.get(name, 1.0) - 1.0
            event = city.current_event or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è"
            event_mod = game.config["event_modifiers"].get(event, {}).get(name, 1.0) - 1.0
            total_percent = city_mod + event_mod
            final_modifier = 1.0 + total_percent
            expected_price = int(good_obj.base_price * final_modifier)
            print(f"{idx}. {name} ‚Äî {qty} –µ–¥. ‚Äî –æ–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞: {expected_price}")

    # –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    selection = {}
    used_capacity = 0
    goods_index = {i + 1: name for i, (name, _) in enumerate(available_goods)}

    print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å):")
    while True:
        entry = input("> ").strip()
        if not entry:
            break
        try:
            num, qty = entry.split()
            num = int(num)
            qty = int(qty)

            if num not in goods_index:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
                continue

            name = goods_index[num]
            if qty <= 0:
                print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
                continue
            if qty > game.player.inventory[name]:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ.")
                continue
            if used_capacity + qty > wagon.capacity:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –ø–æ–≤–æ–∑–∫–µ.")
                continue

            selection[name] = selection.get(name, 0) + qty
            used_capacity += qty
        except ValueError:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 1 50")

    if not selection:
        print("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä—ã.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    for name, qty in selection.items():
        good_obj = goods_dict[name]
        game.player.remove_goods(good_obj, qty)

    caravan = game.form_caravan(
        courier=courier,
        wagon=wagon,
        goods_selection=selection,
        city=city
    )

    if city.duration == 0:
        print(f"–ö–∞—Ä–∞–≤–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –†–∏–º (–≤–µ—Ä–Ω–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ)")
    else:
        print(f"–ö–∞—Ä–∞–≤–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {city.name} (–≤–µ—Ä–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {city.duration} —Ü–∏–∫–ª–æ–≤)")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")


def show_active_caravans_status(game) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ü–∏–∫–ª–∞.
    """
    print("\n--- –°—Ç–∞—Ç—É—Å –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ ---")
    if not game.active_caravans:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
        return

    for i, caravan in enumerate(game.active_caravans, 1):
        if caravan.destination.duration == 0:  # –†–∏–º - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
            status = f"{caravan.destination.name} (–†–∏–º) - –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
        else:
            if game.current_cycle < caravan.arrival_cycle:
                days_left = caravan.arrival_cycle - game.current_cycle
                status = f"{caravan.destination.name} | –ü—Ä–∏–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ {days_left} —Ü–∏–∫–ª–æ–≤"
            elif game.current_cycle == caravan.arrival_cycle:
                status = f"{caravan.destination.name} | –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤"
            else:
                days_left = caravan.return_cycle - game.current_cycle
                status = f"{caravan.destination.name} | –í–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ {days_left} —Ü–∏–∫–ª–æ–≤"
                # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è
                if days_left < 0:
                    status += " (–ó–∞–¥–µ—Ä–∂–∫–∞!)"

        if caravan.event_occurred == "–°–º–µ—Ä—Ç—å –∫—É—Ä—å–µ—Ä–∞":
            status += " ‚Äî –ö–£–†–¨–ï–† –ü–û–ì–ò–ë"
        print(f"{i}. {status}")